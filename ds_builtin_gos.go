//
// Droscheme - a Scheme implementation
// Copyright Â© 2012 Andrew Robbins
//
// This program is free software: it is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. You can redistribute it and/or modify it under the
// terms of the GNU Lesser General Public License (LGPL): <http://www.gnu.org/licenses/>.
//
// generated by gos2go from ds_builtin.gos
package droscheme

func _anyZKZRgoZKstring(object Any) Any {
	return _void()
}
func _apply(proc Any, args ...Any) Any {
	return proc.(Applier).Apply(_vectorZKZRlist(SVector(args)))
}
func _not(bo Any) Any {
	return (!bo.(bool))
}
func _binaryZKportZS(a Any) Any {
	return SBool(IsBinaryPort(a))
}
func _booleanZQZS(a, b Any) Any {
	return SBool((IsBool(a) && IsBool(b) && Equal(a, b)))
}
func _booleanZS(a Any) Any {
	return SBool(IsBool(a))
}
func _bytevectorZKcopy(bv Any) Any {
	rv := _makeZKbytevector(_bytevectorZKlength(bv))
	_bytevectorZKcopyZA(bv, rv)
	return rv
}
func _bytevectorZKlength(bv Any) Any {
	return Sint64(len(bv.(SBinary)))
}
func _bytevector(args []Any) Any {
	return _u8ZKvectorZKZRbytevector(SVector(args))
}
func _bytevectorZKu8ZKref(bv, k Any) Any {
	return bv.(SBinary).Ref(k)
}
func _bytevectorZKu8ZKsetZA(bv, k, v Any) Any {
	return bv.(SBinary).Set(k, v)
}
func _bytevectorZKZRu8ZKlist(bv Any) Any {
	return bv
}
func _bytevectorZKZRu8ZKvector(ba Any) Any {
	bv := ba.(SBinary)
	bl := len(bv)
	rv := _makeZKvector(Sint64(bl)).(SBinary)
	for i := 0; i < bl; i++ {
		rv[i] = bv[i]
	}
	return rv
}
func _bytevectorZS(a Any) Any {
	return SBool(IsBinary(a))
}
func _callZKwithZKinputZKfile(path, proc Any) Any {
	return _callZKwithZKport(_openZKinputZKfile(path), proc)
}
func _openZKinputZKfile(filename Any) Any {
	return _void()
}
func _openZKoutputZKfile(filename Any) Any {
	return _void()
}
func _callZKwithZKport(port, proc Any) Any {
	return _void()
}
func _callZKwithZKvalues(producer, consumer Any) Any {
	values := producer.(Applier).Apply(_null())
	return consumer.(Applier).Apply(values)
}
func _charZKZRinteger(c Any) Any {
	return Sint64(c.(SChar))
}
func _charZKreadyZS(port Any) Any {
	return SBool(port.(RunePeeker).ReadyRune())
}
func _charZS(a Any) Any {
	return SBool(IsChar(a))
}
func _closeZKinputZKport(port Any) Any {
	if !IsPort(port) {
		_error("close-input-port expected port")
	}
	if !IsInputPort(port) {
		_error("close-input-port expected input-port")
	}
	return _closeZKport(port)
}
func _closeZKoutputZKport(port Any) Any {
	if !IsPort(port) {
		_error("close-output-port expected port")
	}
	if !IsOutputPort(port) {
		_error("close-output-port expected output-port")
	}
	return _closeZKport(port)
}
func _closeZKport(a Any) Any {
	error1panic(a.(Port).Close())
	return _void()
}
func _commandZKline(a Any) Any {
	return _void()
}
func _complexZS(a Any) Any {
	return SBool(IsComplex(a))
}
func _currentZKerrorZKport(rest ...Any) Any {
	return gError.(Applier).Apply(_vectorZKZRlist(SVector(rest)))
}
func _currentZKinputZKport(rest ...Any) Any {
	return gInput.(Applier).Apply(_vectorZKZRlist(SVector(rest)))
}
func _currentZKoutputZKport(rest ...Any) Any {
	return gOutput.(Applier).Apply(_vectorZKZRlist(SVector(rest)))
}
func _currentZKjiffy() Any {
	return _void()
}
func _currentZKsecond() Any {
	return _void()
}
func _denominator(q Any) Any {
	return q.(SRational).Dmtr()
}
func _display(a Any, portZZS ...Any) Any {
	port := portZZS[0]
	port.(OPort).Write(_anyZKZRgoZKstring(a).(SString).ToBytes())
	return _void()
}
func _emptyZS(a Any) Any {
	return SBool(IsEmpty(a))
}
func _eofZKobject() Any {
	return gEOF
}
func _eofZKobjectZS(a Any) Any {
	if r, ok := a.(SChar); ok {
		return SBool((r == gEOF))
	}
	return SBool(false)
}
func _equalZS(a, b Any) Any {
	return _void()
}
func _evalZKrest(exp, env Any) Any {
	return _void()
}
func _eval(exp, env Any) Any {
	return _void()
}
func _exactZKintegerZKsqrt(a Any) Any {
	return _void()
}
func _exactZS(a Any) Any {
	return _void()
}
func _exit(a Any) Any {
	return _void()
}
func _floor(a Any) Any {
	return _void()
}
func _flushZKoutputZKport(port Any) Any {
	return _void()
}
func _getZKoutputZKbytevector(port Any) Any {
	return _void()
}
func _getZKoutputZKstring(port Any) Any {
	return _void()
}
func _hash(a Any) Any {
	return _void()
}
func _hashtableZKZRlist(ht Any) Any {
	return _void()
}
func _hashtableZKclearZA(ht Any) Any {
	return _void()
}
func _hashtableZKcontainsZS(ht Any) Any {
	return _void()
}
func _hashtableZKcopy(ht Any) Any {
	return _void()
}
func _hashtableZKdeleteZA(ht Any) Any {
	return _void()
}
func _hashtableZKentries(ht Any) Any {
	return _void()
}
func _hashtableZKequivalenceZKfunction(ht Any) Any {
	return _void()
}
func _hashtableZKhashZKfunction(ht Any) Any {
	return _void()
}
func _hashtableZKkeys(ht Any) Any {
	return _void()
}
func _hashtableZKmutableZS(ht Any) Any {
	return _void()
}
func _hashtableZKref(ht Any) Any {
	return _void()
}
func _hashtableZKsetZA(ht Any) Any {
	return _void()
}
func _hashtableZKsize(ht Any) Any {
	return _void()
}
func _hashtableZKupdateZA(ht Any) Any {
	return _void()
}
func _hashtableZKvalues(ht Any) Any {
	return _void()
}
func _hashtableZS(ht Any) Any {
	return _void()
}
func _inexactZQZS(z Any) Any {
	return _void()
}
func _inexactZS(z Any) Any {
	return _void()
}
func _inputZKportZS(port Any) Any {
	return SBool(IsInputPort(port))
}
func _integerZKZRchar(z Any) Any {
	return _void()
}
func _integerZS(z Any) Any {
	return _void()
}
func _interactionZKenvironment(z Any) Any {
	return _void()
}
func _listZKZRstring(z Any) Any {
	return _void()
}
func _makeZM(z Any) Any {
	return _void()
}
func _makeZKbytevector(z Any) Any {
	return _void()
}
func _makeZKequalZKhashtable(z Any) Any {
	return _void()
}
func _makeZKhashtable(z Any) Any {
	return _void()
}
func _makeZKparameter(z Any) Any {
	return _void()
}
func _negativeZS(x Any) Any {
	return _void()
}
func _numerator(q Any) Any {
	return q.(SRational).Nmtr()
}
func _bytevectorZKcopyZA(z, y Any) Any {
	return _void()
}
func _u8ZKvectorZKZRbytevector(z Any) Any {
	return _void()
}
func Export_ds_builtin(env *Env) {
	env.registerGos(_anyZKZRgoZKstring)
	env.registerGos(_apply)
	env.registerGos(_not)
	env.registerGos(_binaryZKportZS)
	env.registerGos(_booleanZQZS)
	env.registerGos(_booleanZS)
	env.registerGos(_bytevectorZKcopy)
	env.registerGos(_bytevectorZKlength)
	env.registerGos(_bytevectorZKu8ZKref)
	env.registerGos(_bytevectorZKu8ZKsetZA)
	env.registerGos(_bytevectorZKZRu8ZKlist)
	env.registerGos(_bytevectorZKZRu8ZKvector)
	env.registerGos(_bytevectorZS)
	env.registerGos(_callZKwithZKinputZKfile)
	env.registerGos(_openZKinputZKfile)
	env.registerGos(_openZKoutputZKfile)
	env.registerGos(_callZKwithZKport)
	env.registerGos(_callZKwithZKvalues)
	env.registerGos(_charZKZRinteger)
	env.registerGos(_charZKreadyZS)
	env.registerGos(_charZS)
	env.registerGos(_closeZKinputZKport)
	env.registerGos(_closeZKoutputZKport)
	env.registerGos(_closeZKport)
	env.registerGos(_commandZKline)
	env.registerGos(_complexZS)
	env.registerGos(_currentZKerrorZKport)
	env.registerGos(_currentZKinputZKport)
	env.registerGos(_currentZKoutputZKport)
	env.registerGos(_currentZKjiffy)
	env.registerGos(_currentZKsecond)
	env.registerGos(_denominator)
	env.registerGos(_display)
	env.registerGos(_emptyZS)
	env.registerGos(_eofZKobject)
	env.registerGos(_eofZKobjectZS)
	env.registerGos(_equalZS)
	env.registerGos(_evalZKrest)
	env.registerGos(_eval)
	env.registerGos(_exactZKintegerZKsqrt)
	env.registerGos(_exactZS)
	env.registerGos(_exit)
	env.registerGos(_floor)
	env.registerGos(_flushZKoutputZKport)
	env.registerGos(_getZKoutputZKbytevector)
	env.registerGos(_getZKoutputZKstring)
	env.registerGos(_hash)
	env.registerGos(_hashtableZKZRlist)
	env.registerGos(_hashtableZKclearZA)
	env.registerGos(_hashtableZKcontainsZS)
	env.registerGos(_hashtableZKcopy)
	env.registerGos(_hashtableZKdeleteZA)
	env.registerGos(_hashtableZKentries)
	env.registerGos(_hashtableZKequivalenceZKfunction)
	env.registerGos(_hashtableZKhashZKfunction)
	env.registerGos(_hashtableZKkeys)
	env.registerGos(_hashtableZKmutableZS)
	env.registerGos(_hashtableZKref)
	env.registerGos(_hashtableZKsetZA)
	env.registerGos(_hashtableZKsize)
	env.registerGos(_hashtableZKupdateZA)
	env.registerGos(_hashtableZKvalues)
	env.registerGos(_hashtableZS)
	env.registerGos(_inexactZQZS)
	env.registerGos(_inexactZS)
	env.registerGos(_inputZKportZS)
	env.registerGos(_integerZKZRchar)
	env.registerGos(_integerZS)
	env.registerGos(_interactionZKenvironment)
	env.registerGos(_listZKZRstring)
	env.registerGos(_makeZM)
	env.registerGos(_makeZKbytevector)
	env.registerGos(_makeZKequalZKhashtable)
	env.registerGos(_makeZKhashtable)
	env.registerGos(_makeZKparameter)
	env.registerGos(_negativeZS)
	env.registerGos(_numerator)
	env.registerGos(_bytevectorZKcopyZA)
	env.registerGos(_u8ZKvectorZKZRbytevector)
}
