//
// Droscheme - a Scheme implementation
// Copyright Â© 2012 Andrew Robbins
//
// This program is free software: it is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. You can redistribute it and/or modify it under the
// terms of the GNU Lesser General Public License (LGPL): <http://www.gnu.org/licenses/>.
//
// generated by gos2go from ds_list.gos
package droscheme

func (ls *Pair) Ref(ka Any) Any {
	k := ToFixnum(ka)
	for cur := Any(ls); IsPair(cur); k, cur = k-1, _cdr(cur) {
		if k == 0 {
			return _car(cur)
		}
	}
	return _void()
}
func _length(a Any) Any {
	return a.(Seq).Length()
}
func _listZH(z Any) Any {
	return _void()
}
func _listZI(z Any) Any {
	return _void()
}
func _nullZS(z Any) Any {
	return _void()
}
func _pairZS(z Any) Any {
	return _void()
}
func _alistZKcons() Any {
	return _void()
}
func _alistZKcopy() Any {
	return _void()
}
func _alistZKdelete() Any {
	return _void()
}
func _alistZKdeleteZA() Any {
	return _void()
}
func _any() Any {
	return _void()
}
func _appendZA() Any {
	return _void()
}
func _appendZKmap() Any {
	return _void()
}
func _appendZKmapZA() Any {
	return _void()
}
func _appendZKreverse() Any {
	return _void()
}
func _appendZKreverseZA() Any {
	return _void()
}
func _assoc() Any {
	return _void()
}
func _break() Any {
	return _void()
}
func _breakZA() Any {
	return _void()
}
func _carZIcdr(ls Any) (car Any, cdr Any) {
	return _car(ls), _cdr(ls)
}
func _car(ls Any) Any {
	return ls.(*Pair).car
}
func _cdr(ls Any) Any {
	return ls.(*Pair).cdr
}
func _caar(ls Any) Any {
	return _car(_car(ls))
}
func _cadr(ls Any) Any {
	return _car(_cdr(ls))
}
func _caaar(ls Any) Any {
	return _car(_cdr(_cdr(ls)))
}
func _caadr(ls Any) Any {
	return _car(_cdr(_cdr(ls)))
}
func _cadar(ls Any) Any {
	return _car(_cdr(_cdr(ls)))
}
func _caddr(ls Any) Any {
	return _car(_cdr(_cdr(ls)))
}
func _caaaar(ls Any) Any {
	return _car(_car(_car(_car(ls))))
}
func _caaadr(ls Any) Any {
	return _car(_car(_car(_cdr(ls))))
}
func _caadar(ls Any) Any {
	return _car(_car(_cdr(_car(ls))))
}
func _caaddr(ls Any) Any {
	return _car(_car(_cdr(_cdr(ls))))
}
func _cadaar(ls Any) Any {
	return _car(_cdr(_car(_car(ls))))
}
func _cadadr(ls Any) Any {
	return _car(_cdr(_car(_cdr(ls))))
}
func _caddar(ls Any) Any {
	return _car(_cdr(_cdr(_car(ls))))
}
func _cadddr(ls Any) Any {
	return _car(_cdr(_cdr(_cdr(ls))))
}
func _cdaaar(ls Any) Any {
	return _cdr(_car(_car(_car(ls))))
}
func _cdaadr(ls Any) Any {
	return _cdr(_car(_car(_cdr(ls))))
}
func _cdadar(ls Any) Any {
	return _cdr(_car(_cdr(_car(ls))))
}
func _cdaddr(ls Any) Any {
	return _cdr(_car(_cdr(_cdr(ls))))
}
func _cddaar(ls Any) Any {
	return _cdr(_cdr(_car(_car(ls))))
}
func _cddadr(ls Any) Any {
	return _cdr(_cdr(_car(_cdr(ls))))
}
func _cdddar(ls Any) Any {
	return _cdr(_cdr(_cdr(_car(ls))))
}
func _cddddr(ls Any) Any {
	return _cdr(_cdr(_cdr(_cdr(ls))))
}
func _cdaar(ls Any) Any {
	return _cdr(_car(_car(ls)))
}
func _cdadr(ls Any) Any {
	return _cdr(_car(_cdr(ls)))
}
func _cddar(ls Any) Any {
	return _cdr(_cdr(_car(ls)))
}
func _cdddr(ls Any) Any {
	return _cdr(_cdr(_cdr(ls)))
}
func _cdar(ls Any) Any {
	return _cdr(_car(ls))
}
func _cddr(ls Any) Any {
	return _cdr(_cdr(ls))
}
func _cons(a, b Any) Any {
	return &Pair{a, b}
}
func _list(rest ...Any) Any {
	return _vectorZKZRlist(SVector{rest})
}
func _listZKref(ls, k Any, rest ...Any) Any {
	return ls.(*Pair).Ref(k)
}
func _setZKcarZA(ls, value Any) Any {
	ls.(*Pair).car = value
	return _void()
}
func _setZKcdrZA(ls, value Any) Any {
	ls.(*Pair).cdr = value
	return _void()
}
func _circularZKlist() Any {
	return _void()
}
func _circularZKlistZS() Any {
	return _void()
}
func _concatenate() Any {
	return _void()
}
func _concatenateZA() Any {
	return _void()
}
func _count() Any {
	return _void()
}
func _delete() Any {
	return _void()
}
func _deleteZA() Any {
	return _void()
}
func _deleteZKduplicates() Any {
	return _void()
}
func _deleteZKduplicatesZA() Any {
	return _void()
}
func _dottedZKlistZS() Any {
	return _void()
}
func _drop() Any {
	return _void()
}
func _dropZKright() Any {
	return _void()
}
func _dropZKrightZA() Any {
	return _void()
}
func _dropZKwhile() Any {
	return _void()
}
func _every() Any {
	return _void()
}
func _filter() Any {
	return _void()
}
func _filterZA() Any {
	return _void()
}
func _filterZKmap() Any {
	return _void()
}
func _find() Any {
	return _void()
}
func _findZKtail() Any {
	return _void()
}
func _fold() Any {
	return _void()
}
func _foldZKright() Any {
	return _void()
}
func _iota() Any {
	return _void()
}
func _last() Any {
	return _void()
}
func _lastZKpair() Any {
	return _void()
}
func _lengthZI() Any {
	return _void()
}
func _listZKcopy(ls Any) Any {
	if !IsPair(ls) {
		return ls
	}
	car, cdr := _carZIcdr(ls)
	return _cons(car, _listZKcopy(cdr))
}
func _listZKindex() Any {
	return _void()
}
func _listZKtabulate() Any {
	return _void()
}
func _listZQ() Any {
	return _void()
}
func _lsetZKadjoin() Any {
	return _void()
}
func _lsetZKdiffZIintersection() Any {
	return _void()
}
func _lsetZKdiffZIintersectionZA() Any {
	return _void()
}
func _lsetZKdifference() Any {
	return _void()
}
func _lsetZKdifferenceZA() Any {
	return _void()
}
func _lsetZKintersection() Any {
	return _void()
}
func _lsetZKintersectionZA() Any {
	return _void()
}
func _lsetZKunion() Any {
	return _void()
}
func _lsetZKunionZA() Any {
	return _void()
}
func _lsetZKxor() Any {
	return _void()
}
func _lsetZKxorZA() Any {
	return _void()
}
func _lsetZPZQ() Any {
	return _void()
}
func _lsetZQ() Any {
	return _void()
}
func _makeZKlist() Any {
	return _void()
}
func _mapZA() Any {
	return _void()
}
func _mapZKinZKorder() Any {
	return _void()
}
func _member() Any {
	return _void()
}
func _notZKpairZS(x Any) Any {
	return _not(_pairZS(x))
}
func _null() Any {
	return list0()
}
func _nullZKlistZS() Any {
	return _void()
}
func _pairZKfold() Any {
	return _void()
}
func _pairZKfoldZKright() Any {
	return _void()
}
func _pairZKforZKeach() Any {
	return _void()
}
func _partition() Any {
	return _void()
}
func _partitionZA() Any {
	return _void()
}
func _reduce() Any {
	return _void()
}
func _reduceZKright() Any {
	return _void()
}
func _remove() Any {
	return _void()
}
func _removeZA() Any {
	return _void()
}
func _reverseZA() Any {
	return _void()
}
func _span() Any {
	return _void()
}
func _spanZA() Any {
	return _void()
}
func _splitZKat() Any {
	return _void()
}
func _splitZKatZA() Any {
	return _void()
}
func _take() Any {
	return _void()
}
func _takeZA() Any {
	return _void()
}
func _takeZKright() Any {
	return _void()
}
func _takeZKwhile() Any {
	return _void()
}
func _takeZKwhileZA() Any {
	return _void()
}
func _unfold() Any {
	return _void()
}
func _unfoldZKright() Any {
	return _void()
}
func _unzip1() Any {
	return _void()
}
func _unzip2() Any {
	return _void()
}
func _unzip3() Any {
	return _void()
}
func _unzip4() Any {
	return _void()
}
func _unzip5() Any {
	return _void()
}
func _xcons(a, b Any) Any {
	return _cons(b, a)
}
func _zip() Any {
	return _void()
}
func Export_ds_list(env *Env) {
	env.registerGos(_length)
	env.registerGos(_listZH)
	env.registerGos(_listZI)
	env.registerGos(_nullZS)
	env.registerGos(_pairZS)
	env.registerGos(_alistZKcons)
	env.registerGos(_alistZKcopy)
	env.registerGos(_alistZKdelete)
	env.registerGos(_alistZKdeleteZA)
	env.registerGos(_any)
	env.registerGos(_appendZA)
	env.registerGos(_appendZKmap)
	env.registerGos(_appendZKmapZA)
	env.registerGos(_appendZKreverse)
	env.registerGos(_appendZKreverseZA)
	env.registerGos(_assoc)
	env.registerGos(_break)
	env.registerGos(_breakZA)
	env.registerGos(_car)
	env.registerGos(_cdr)
	env.registerGos(_caar)
	env.registerGos(_cadr)
	env.registerGos(_caaar)
	env.registerGos(_caadr)
	env.registerGos(_cadar)
	env.registerGos(_caddr)
	env.registerGos(_caaaar)
	env.registerGos(_caaadr)
	env.registerGos(_caadar)
	env.registerGos(_caaddr)
	env.registerGos(_cadaar)
	env.registerGos(_cadadr)
	env.registerGos(_caddar)
	env.registerGos(_cadddr)
	env.registerGos(_cdaaar)
	env.registerGos(_cdaadr)
	env.registerGos(_cdadar)
	env.registerGos(_cdaddr)
	env.registerGos(_cddaar)
	env.registerGos(_cddadr)
	env.registerGos(_cdddar)
	env.registerGos(_cddddr)
	env.registerGos(_cdaar)
	env.registerGos(_cdadr)
	env.registerGos(_cddar)
	env.registerGos(_cdddr)
	env.registerGos(_cdar)
	env.registerGos(_cddr)
	env.registerGos(_cons)
	env.registerGos(_list)
	env.registerGos(_listZKref)
	env.registerGos(_setZKcarZA)
	env.registerGos(_setZKcdrZA)
	env.registerGos(_circularZKlist)
	env.registerGos(_circularZKlistZS)
	env.registerGos(_concatenate)
	env.registerGos(_concatenateZA)
	env.registerGos(_count)
	env.registerGos(_delete)
	env.registerGos(_deleteZA)
	env.registerGos(_deleteZKduplicates)
	env.registerGos(_deleteZKduplicatesZA)
	env.registerGos(_dottedZKlistZS)
	env.registerGos(_drop)
	env.registerGos(_dropZKright)
	env.registerGos(_dropZKrightZA)
	env.registerGos(_dropZKwhile)
	env.registerGos(_every)
	env.registerGos(_filter)
	env.registerGos(_filterZA)
	env.registerGos(_filterZKmap)
	env.registerGos(_find)
	env.registerGos(_findZKtail)
	env.registerGos(_fold)
	env.registerGos(_foldZKright)
	env.registerGos(_iota)
	env.registerGos(_last)
	env.registerGos(_lastZKpair)
	env.registerGos(_lengthZI)
	env.registerGos(_listZKcopy)
	env.registerGos(_listZKindex)
	env.registerGos(_listZKtabulate)
	env.registerGos(_listZQ)
	env.registerGos(_lsetZKadjoin)
	env.registerGos(_lsetZKdiffZIintersection)
	env.registerGos(_lsetZKdiffZIintersectionZA)
	env.registerGos(_lsetZKdifference)
	env.registerGos(_lsetZKdifferenceZA)
	env.registerGos(_lsetZKintersection)
	env.registerGos(_lsetZKintersectionZA)
	env.registerGos(_lsetZKunion)
	env.registerGos(_lsetZKunionZA)
	env.registerGos(_lsetZKxor)
	env.registerGos(_lsetZKxorZA)
	env.registerGos(_lsetZPZQ)
	env.registerGos(_lsetZQ)
	env.registerGos(_makeZKlist)
	env.registerGos(_mapZA)
	env.registerGos(_mapZKinZKorder)
	env.registerGos(_member)
	env.registerGos(_notZKpairZS)
	env.registerGos(_null)
	env.registerGos(_nullZKlistZS)
	env.registerGos(_pairZKfold)
	env.registerGos(_pairZKfoldZKright)
	env.registerGos(_pairZKforZKeach)
	env.registerGos(_partition)
	env.registerGos(_partitionZA)
	env.registerGos(_reduce)
	env.registerGos(_reduceZKright)
	env.registerGos(_remove)
	env.registerGos(_removeZA)
	env.registerGos(_reverseZA)
	env.registerGos(_span)
	env.registerGos(_spanZA)
	env.registerGos(_splitZKat)
	env.registerGos(_splitZKatZA)
	env.registerGos(_take)
	env.registerGos(_takeZA)
	env.registerGos(_takeZKright)
	env.registerGos(_takeZKwhile)
	env.registerGos(_takeZKwhileZA)
	env.registerGos(_unfold)
	env.registerGos(_unfoldZKright)
	env.registerGos(_unzip1)
	env.registerGos(_unzip2)
	env.registerGos(_unzip3)
	env.registerGos(_unzip4)
	env.registerGos(_unzip5)
	env.registerGos(_xcons)
	env.registerGos(_zip)
}
