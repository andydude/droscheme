; -*- mode: scheme -*-
(package droscheme

  (import "math")

  (define (angle z)
    (as z ComplexNum (Angle)))

  (define (imag-part z)
    (as z ComplexNum (Imag)))

  (define (magnitude z)
    (as z ComplexNum (Scale)))

  ;; nonstandard
  (define (make-exact-polar scale angle)
    (:= (s t) (UnifyAny scale angle))
    #(SComplexPolar (ToRational s) (ToRational t)))

  ;; nonstandard
  (define (make-inexact-polar scale angle)
    (:= (s t) (UnifyFlonums scale angle))
    (:= x (* s (dot math (Cos t))))
    (:= y (* s (dot math (Sin t))))
    (Scomplex128 (call-go complex x y)))

  (define (make-polar scale angle)
    (if1 (bool-or (IsComplex scale) (IsComplex angle))
         (error "make-polar expected real number"))
    (if1 (bool-or (IsInexact scale) (IsInexact angle))
         (return (make-inexact-polar scale angle)))
    (make-exact-polar scale angle))

  ;; nonstandard
  (define (make-exact-rectangular scale angle)
    (:= (s t) (UnifyAny scale angle))
    #(SComplex (ToRational s) (ToRational t)))

  ;; nonstandard
  (define (make-inexact-rectangular scale angle)
    (:= (s t) (UnifyFlonums scale angle))
    (Scomplex128 (call-go complex s t)))

  (define (make-rectangular x y)
    (if1 (bool-or (IsComplex x) (IsComplex y))
         (error "make-rectangular expected real number"))
    (if1 (bool-or (IsInexact x) (IsInexact y))
         (return (make-inexact-rectangular x y)))
    (make-exact-rectangular x y))

  (define (real-part z)
    (as z ComplexNum (Real)))

);package
