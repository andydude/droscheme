(quote

(&condition                             "1"  (base) (6))
(&i/o                                   "1"  (base) (6))
(&i/o-decoding                          "1"  (base) (6))
(&i/o-encoding                          "1"  (base) (6))
(&i/o-file-already-exists               "1"  (base) (6))
(&i/o-file-does-not-exist               "1"  (base) (6))
(&i/o-file-is-read-only                 "1"  (base) (6))
(&i/o-file-protection                   "1"  (base) (6))
(&i/o-filename                          "1"  (base) (6))
(&i/o-invalid-position                  "1"  (base) (6))
(&i/o-port                              "1"  (base) (6))
(&i/o-read                              "1"  (base) (6))
(&i/o-write                             "1"  (base) (6))
(&serious                               "1"  (base) (6))
(&syntax                                "1"  (base) (6))
(&undefined                             "1"  (base) (6))
(&violation                             "1"  (base) (6))
(&warning                               "1"  (base) (6))
(*                                      "R"  (base) (2 3 4 5 6 7))
(+                                      "R"  (base) (2 3 4 5 6 7))
(-                                      "R"  (base) (2 3 4 5 6 7))
(/                                      "R"  (base) (2 3 4 5 6 7))
(<                                      "R"  (base) (2 3 4 5 6 7))
(<=                                     "R"  (base) (2 3 4 5 6 7))
(=                                      "R"  (base) (2 3 4 5 6 7))
(>                                      "R"  (base) (2 3 4 5 6 7))
(>=                                     "R"  (base) (2 3 4 5 6 7))
(abs                                    "1"  (base) (2 3 4 5 6 7))
(acos                                   "1"  (core) (2 3 4 5 6 7) (scheme inexact))
(and                                    "1"  (base syntax) (3 4 5 6 7))
(angle                                  "1"  (base) (2 3 4 5 6 7) (scheme complex))
(append                                 "1R" (base) (2 3 4 5 6 7))
(append!                                "1R" (base) (2))
(apply                                  "1"  (base) (2 3 4 5 6 7))
(asin                                   "1"  (core) (2 3 4 5 6 7) (scheme inexact))
(assert                                 "1"  (base syntax) (6))
(assertion-violation?                   "1"  (base) (6))
(assoc                                  "2"  (base) (2 3 4 5 6 7))
(assp                                   "2"  (base) ())
(assq                                   "2"  (base) (2 3 4 5 6 7))
(assv                                   "2"  (base) (2 3 4 5 6 7))
(atan                                   "1o" (core) (2 3 4 5 6 7) (scheme inexact))
(begin                                  "R"  (core syntax) (2 3 4 5 6 7))
(binary-port?                           "1"  (base) (6 7) (rnrs io ports))
(bitwise-and                            "1"  (base) (6) (rnrs arithmetic bitwise))
(bitwise-arithmetic-shift               "1"  (base) (6) (rnrs arithmetic bitwise))
(bitwise-arithmetic-shift-left          "1"  (base) (6) (rnrs arithmetic bitwise))
(bitwise-arithmetic-shift-right         "1"  (base) (6) (rnrs arithmetic bitwise))
(bitwise-bit-count                      "1"  (base) (6) (rnrs arithmetic bitwise))
(bitwise-bit-field                      "1"  (base) (6) (rnrs arithmetic bitwise))
(bitwise-bit-set?                       "1"  (base) (6) (rnrs arithmetic bitwise))
(bitwise-copy-bit                       "1"  (base) (6) (rnrs arithmetic bitwise))
(bitwise-copy-bit-field                 "1"  (base) (6) (rnrs arithmetic bitwise))
(bitwise-first-bit-set                  "1"  (base) (6) (rnrs arithmetic bitwise))
(bitwise-if                             "1"  (base) (6) (rnrs arithmetic bitwise))
(bitwise-ior                            "1"  (base) (6) (rnrs arithmetic bitwise))
(bitwise-length                         "1"  (base) (6) (rnrs arithmetic bitwise))
(bitwise-not                            "1"  (base) (6) (rnrs arithmetic bitwise))
(bitwise-reverse-bit-field              "1"  (base) (6) (rnrs arithmetic bitwise))
(bitwise-rotate-bit-field               "1"  (base) (6) (rnrs arithmetic bitwise))
(bitwise-xor                            "1"  (base) (6) (rnrs arithmetic bitwise))
(boolean=?                              "2R" (base) ())
(boolean?                               "1"  (base) (3 4 5 6 7))
(buffer-mode                            "1"  (base syntax) (6) (rnrs io ports))
(buffer-mode?                           "1"  (base) (6) (rnrs io ports))
(bytevector->sint-list                  "1"  (base) (6))
(bytevector->string                     "1"  (base) (6) (rnrs io ports))
(bytevector->u8-list                    "1"  (base) (6))
(bytevector->u8-vector                  "1"  (base) (6))
(bytevector->uint-list                  "1"  (base) (6))
(bytevector-copy                        "1"  (base) (6 7) (rnrs bytevectors))
(bytevector-copy!                       "1"  (base) (6 7) (rnrs bytevectors))
(bytevector-copy-partial                "1"  (base) (6 7) (rnrs bytevectors))
(bytevector-copy-partial!               "1"  (base) (6 7) (rnrs bytevectors))
(bytevector-ieee-double-native-ref      "1"  (base) (6) (rnrs bytevectors))
(bytevector-ieee-double-native-set!     "1"  (base) (6) (rnrs bytevectors))
(bytevector-ieee-double-ref             "1"  (base) (6) (rnrs bytevectors))
(bytevector-ieee-single-native-ref      "1"  (base) (6) (rnrs bytevectors))
(bytevector-ieee-single-native-set!     "1"  (base) (6) (rnrs bytevectors))
(bytevector-ieee-single-ref             "1"  (base) (6) (rnrs bytevectors))
(bytevector-length                      "1"  (base) (6 7) (rnrs bytevectors))
(bytevector-s16-native-ref              "1"  (base) (6) (rnrs bytevectors))
(bytevector-s16-native-set!             "1"  (base) (6) (rnrs bytevectors))
(bytevector-s16-ref                     "1"  (base) (6) (rnrs bytevectors))
(bytevector-s16-set!                    "1"  (base) (6) (rnrs bytevectors))
(bytevector-s32-native-ref              "1"  (base) (6) (rnrs bytevectors))
(bytevector-s32-native-set!             "1"  (base) (6) (rnrs bytevectors))
(bytevector-s32-ref                     "1"  (base) (6) (rnrs bytevectors))
(bytevector-s32-set!                    "1"  (base) (6) (rnrs bytevectors))
(bytevector-s64-native-ref              "1"  (base) (6) (rnrs bytevectors))
(bytevector-s64-native-set!             "1"  (base) (6) (rnrs bytevectors))
(bytevector-s64-ref                     "1"  (base) (6) (rnrs bytevectors))
(bytevector-s64-set!                    "1"  (base) (6) (rnrs bytevectors))
(bytevector-s8-ref                      "1"  (base) (6) (rnrs bytevectors))
(bytevector-s8-set!                     "1"  (base) (6) (rnrs bytevectors))
(bytevector-sint-ref                    "1"  (base) (6) (rnrs bytevectors))
(bytevector-sint-set!                   "1"  (base) (6) (rnrs bytevectors))
(bytevector-u16-native-ref              "1"  (base) (6) (rnrs bytevectors))
(bytevector-u16-native-set!             "1"  (base) (6) (rnrs bytevectors))
(bytevector-u16-ref                     "1"  (base) (6) (rnrs bytevectors))
(bytevector-u16-set!                    "1"  (base) (6) (rnrs bytevectors))
(bytevector-u32-native-ref              "1"  (base) (6) (rnrs bytevectors))
(bytevector-u32-native-set!             "1"  (base) (6) (rnrs bytevectors))
(bytevector-u32-ref                     "1"  (base) (6) (rnrs bytevectors))
(bytevector-u32-set!                    "1"  (base) (6) (rnrs bytevectors))
(bytevector-u64-native-ref              "1"  (base) (6) (rnrs bytevectors))
(bytevector-u64-native-set!             "1"  (base) (6) (rnrs bytevectors))
(bytevector-u64-ref                     "1"  (base) (6) (rnrs bytevectors))
(bytevector-u64-set!                    "1"  (base) (6) (rnrs bytevectors))
(bytevector-u8-ref                      "1"  (base) (6 7) (rnrs bytevectors))
(bytevector-u8-set!                     "1"  (base) (6 7) (rnrs bytevectors))
(bytevector-uint-ref                    "1"  (base) (6) (rnrs bytevectors))
(bytevector-uint-set!                   "1"  (base) (6) (rnrs bytevectors))
(bytevector=?                           "2"  (base) (6) (rnrs bytevectors))
(bytevector?                            "1"  (base) (6 7) (rnrs bytevectors))
(call-with-bytevector-output-port       "1o"  (base) (6) (rnrs io ports))
(call-with-current-continuation         "1"  (core) (3 4 5 6 7))
(call-with-input-file                   "2"  (base) (3 4 5 6 7) (rnrs io simple) (scheme file))
(call-with-output-file                  "2"  (base) (3 4 5 6 7) (rnrs io simple) (scheme file))
(call-with-port                         "1"  (base) (6 7) (rnrs io ports))
(call-with-string-output-port           "1o"  (base) (6) (rnrs io ports))
(call-with-values                       "1"  (base) (5 7))
(call/cc                                "1"  (base) (5 6 7))
(case                                   "1"  (base syntax) (2 3 4 5 6 7))
(case-lambda                            "1"  (base syntax) (7) (scheme case-lambda))
(car                                    "1"  (core) (2 3 4 5 6 7))
(caar                                   "1"  (base) (2 3 4 5 6 7))
(cadr                                   "1"  (base) (2 3 4 5 6 7))
(caaar                                  "1"  (base) (2 3 4 5 6 7))
(caadr                                  "1"  (base) (2 3 4 5 6 7))
(cadar                                  "1"  (base) (2 3 4 5 6 7))
(caddr                                  "1"  (base) (2 3 4 5 6 7))
(caaaar                                 "1"  (base) (2 3 4 5 6 7))
(caaadr                                 "1"  (base) (2 3 4 5 6 7))
(caadar                                 "1"  (base) (2 3 4 5 6 7))
(caaddr                                 "1"  (base) (2 3 4 5 6 7))
(cadaar                                 "1"  (base) (2 3 4 5 6 7))
(cadadr                                 "1"  (base) (2 3 4 5 6 7))
(caddar                                 "1"  (base) (2 3 4 5 6 7))
(cadddr                                 "1"  (base) (2 3 4 5 6 7))
(cdaaar                                 "1"  (base) (2 3 4 5 6 7))
(cdaadr                                 "1"  (base) (2 3 4 5 6 7))
(cdadar                                 "1"  (base) (2 3 4 5 6 7))
(cdaddr                                 "1"  (base) (2 3 4 5 6 7))
(cddaar                                 "1"  (base) (2 3 4 5 6 7))
(cddadr                                 "1"  (base) (2 3 4 5 6 7))
(cdddar                                 "1"  (base) (2 3 4 5 6 7))
(cddddr                                 "1"  (base) (2 3 4 5 6 7))
(cdaar                                  "1"  (base) (2 3 4 5 6 7))
(cdadr                                  "1"  (base) (2 3 4 5 6 7))
(cddar                                  "1"  (base) (2 3 4 5 6 7))
(cdddr                                  "1"  (base) (2 3 4 5 6 7))
(cdar                                   "1"  (base) (2 3 4 5 6 7))
(cddr                                   "1"  (base) (2 3 4 5 6 7))
(cdr                                    "1"  (core) (2 3 4 5 6 7))
(ceiling                                "1"  (base) (2 3 4 5 6 7))
(ceiling-quotient                       "2"  (base) (7) (scheme division))
(ceiling-remainder                      "2"  (base) (7) (scheme division))
(ceiling/                               "2"  (base) (7) (scheme division))
(centered-quotient                      "2"  (base) (7) (scheme division))
(centered-remainder                     "2"  (base) (7) (scheme division))
(centered/                              "2"  (base) (7) (scheme division))
(char->integer                          "1"  (base) (2 3 4 5 6 7))
(char-alphabetic?                       "1"  (base) (2 3 4 5 6 7) (scheme char))
(char-ci<=?                             "2R" (base) (2 3 4 5 6 7) (scheme char))
(char-ci<?                              "2R" (base) (2 3 4 5 6 7) (scheme char))
(char-ci=?                              "2R" (base) (2 3 4 5 6 7) (scheme char))
(char-ci>=?                             "2R" (base) (2 3 4 5 6 7) (scheme char))
(char-ci>?                              "2R" (base) (2 3 4 5 6 7) (scheme char))
(char-downcase                          "1"  (base) (2 3 4 5 6 7) (scheme char))
(char-foldcase                          "1"  (base) (7) (scheme char))
(char-lower-case?                       "1"  (base) (2 3 4 5 6 7) (scheme char))
(char-numeric?                          "1"  (base) (2 3 4 5 6 7) (scheme char))
(char-ready?                            "0o" (base) (2 3 4 5 6 7))
(char-upcase                            "1"  (base) (2 3 4 5 6 7) (scheme char))
(char-upper-case?                       "1"  (base) (2 3 4 5 6 7) (scheme char))
(char-whitespace?                       "1"  (base) (2 3 4 5 6 7) (scheme char))
(char<=?                                "2R" (base) (2 3 4 5 6 7))
(char<?                                 "2R" (base) (2 3 4 5 6 7))
(char=?                                 "2R" (base) (2 3 4 5 6 7))
(char>=?                                "2R" (base) (2 3 4 5 6 7))
(char>?                                 "2R" (base) (2 3 4 5 6 7))
(char?                                  "1"  (base) (2 3 4 5 6 7))
(close-input-port                       "1"  (base) (2 3 4 5 6) (rnrs io simple))
(close-output-port                      "1"  (base) (2 3 4 5 6) (rnrs io simple))
(close-port                             "1"  (base) (6 7) (rnrs io ports))
(command-line                           "1"  (base) (7) (scheme process-context))
(complex?                               "1"  (base) (2 3 4 5 6 7))
(cond                                   "1"  (base syntax) (2 3 4 5 6 7))
(cond-expand                            "1"  (base syntax) (7))
(condition?                             "1"  (base) (6))
(cons                                   "1"  (base) (2 3 4 5 6 7))
(cons*                                  "1"  (base) (6))
(cos                                    "1"  (base) (2 3 4 5 6 7) (scheme inexact))
(current-environment                    "1"  (base) ())
(current-error-port                     "0"  (base) (6 7))
(current-input-port                     "0"  (base) (2 3 4 5 6 7))
(current-jiffy                          "0"  (base) (7) (scheme time))
(current-output-port                    "0"  (base) (2 3 4 5 6 7))
(current-second                         "0"  (base) (7) (scheme time))
(datum->syntax                          "2"  (base) (6) (rnrs syntax-case))
(define                                 "1R" (base syntax) (3 4 5 6 7))
(define-library                         "1R" (base syntax) (7))
(define-record-type                     "1R" (base syntax) (7))
(define-syntax                          "2"  (base syntax) (5 6 7))
(define-values                          "1R" (base syntax) (7))
(delay                                  "1"  (base syntax) (3 4 5 6 7) (scheme lazy))
(delete-file                            "1"  (base) (7) (scheme file))
(denominator                            "1"  (base) (3 4 5 6 7))
(digit-value                            "1"  (base) (7) (scheme char))
(display                                "1o" (base) (2 3 4 5 6 7) (rnrs io simple) (scheme write))
(div                                    "1"  (base) (6))
(div-and-mod                            "1"  (base) (6))
(div0                                   "1"  (base) (6))
(div0-and-mod0                          "1"  (base) (6))
(do                                     "1"  (base syntax) (2 3 4 5 6 7))
(dump-environment                       "1"  (base) ())
(dynamic-wind                           "1"  (base) (5))
(eager                                  "1"  (base) (7) (scheme lazy))
(endianness                             "0"  (base syntax) (6) (rnrs bytevectors))
(empty?                                 "1"  (base) ())
(environment                            "1"  (base syntax) (7) (scheme eval))
(eof-object                             "0"  (base) (6))
(eof-object?                            "1"  (base) (2 3 4 5 6 7))
(eol-style                              "1"  (base syntax) (6) (rnrs io ports))
(eq?                                    "1"  (base) (2 3 4 5 6 7))
(equal?                                 "1"  (base) (2 3 4 5 6 7))
(eqv?                                   "1"  (base) (2 3 4 5 6 7))
(error                                  "1"  (base) (7))
(error-object-irritants                 "1"  (base) (7))
(error-object-message                   "1"  (base) (7))
(error-object?                          "1"  (base) (7))
(error-handling-mode                    "1"  (base syntax) (6) (rnrs io ports))
(euclidean-quotient                     "2"  (base) (7) (scheme division))
(euclidean-remainder                    "2"  (base) (7) (scheme division))
(euclidean/                             "2"  (base) (7) (scheme division))
(eval                                   "1"  (base) (5 7) (scheme eval))
(eval-literal                           "1"  (base) ())
(even?                                  "1"  (base) (2 3 4 5 6 7))
(exact                                  "1"  (base) (6))
(exact->inexact                         "1"  (base) (2 3 4 5 7))
(exact-integer-sqrt                     "1"  (base) (7))
(exact-integer?                         "1"  (base) (7))
(exact?                                 "1"  (core) (2 3 4 5 6 7))
(exit                                   "1"  (base) (7) (scheme process-context))
(exp                                    "1"  (base) (2 3 4 5 6 7) (scheme inexact))
(export                                 "1"  (core syntax) (6 7))
(expt                                   "2"  (base) (2 3 4 5 6 7))
(file-exists?                           "1"  (base) (7) (scheme file))
(file-options                           "1"  (base syntax) (6) (rnrs io ports))
(finite?                                "1"  (base) (7) (scheme inexact))
(fixnum->flonum                         "1"  (base) (6))
(fixnum-width                           "1"  (base) (6))
(fixnum?                                "1"  (base) (6))
(fl*                                    "R"  (base) (6) (rnrs arithmetic flonums))
(fl+                                    "R"  (base) (6) (rnrs arithmetic flonums))
(fl-                                    "R"  (base) (6) (rnrs arithmetic flonums))
(fl/                                    "R"  (base) (6) (rnrs arithmetic flonums))
(fl<=?                                  "R"  (base) (6) (rnrs arithmetic flonums))
(fl<?                                   "R"  (base) (6) (rnrs arithmetic flonums))
(fl=?                                   "R"  (base) (6) (rnrs arithmetic flonums))
(fl>=?                                  "R"  (base) (6) (rnrs arithmetic flonums))
(fl>?                                   "R"  (base) (6) (rnrs arithmetic flonums))
(flabs                                  "1"  (core) (6) (rnrs arithmetic flonums))
(flacos                                 "1"  (core) (6) (rnrs arithmetic flonums))
(flasin                                 "1"  (core) (6) (rnrs arithmetic flonums))
(flatan                                 "1o" (core) (6) (rnrs arithmetic flonums))
(flceiling                              "1"  (base) (6) (rnrs arithmetic flonums))
(flcos                                  "1"  (base) (6) (rnrs arithmetic flonums))
(fldenominator                          "1"  (base) (6) (rnrs arithmetic flonums))
(fldiv                                  "1"  (base) (6) (rnrs arithmetic flonums))
(fldiv-and-mod                          "1"  (base) (6) (rnrs arithmetic flonums))
(fldiv0                                 "1"  (base) (6) (rnrs arithmetic flonums))
(fldiv0-and-mod0                        "1"  (base) (6) (rnrs arithmetic flonums))
(fleven?                                "1"  (base) (6) (rnrs arithmetic flonums))
(flexp                                  "1"  (base) (6) (rnrs arithmetic flonums))
(flexpt                                 "1"  (base) (6) (rnrs arithmetic flonums))
(flfinite?                              "1"  (base) (6) (rnrs arithmetic flonums))
(flfloor                                "1"  (base) (6) (rnrs arithmetic flonums))
(flinfinite?                            "1"  (base) (6) (rnrs arithmetic flonums))
(flinteger?                             "1"  (base) (6) (rnrs arithmetic flonums))
(fllog                                  "1"  (base) (6) (rnrs arithmetic flonums))
(flmax                                  "1"  (base) (6) (rnrs arithmetic flonums))
(flmin                                  "1"  (base) (6) (rnrs arithmetic flonums))
(flmod                                  "1"  (base) (6) (rnrs arithmetic flonums))
(flmod0                                 "1"  (base) (6) (rnrs arithmetic flonums))
(flnan?                                 "1"  (base) (6) (rnrs arithmetic flonums))
(flnegative?                            "1"  (base) (6) (rnrs arithmetic flonums))
(flnumerator                            "1"  (base) (6) (rnrs arithmetic flonums))
(flodd?                                 "1"  (base) (6) (rnrs arithmetic flonums))
(flonum?                                "1"  (base) (6) (rnrs arithmetic flonums))
(floor                                  "1"  (base) (2 3 4 5 6 7))
(floor-quotient                         "2"  (base) (7) (scheme division))
(floor-remainder                        "2"  (base) (7) (scheme division))
(floor/                                 "2"  (base) (7) (scheme division))
(flpositive?                            "1"  (base) (6) (rnrs arithmetic flonums))
(flround                                "1"  (base) (6) (rnrs arithmetic flonums))
(flsin                                  "1"  (base) (6) (rnrs arithmetic flonums))
(flsqrt                                 "1"  (base) (6) (rnrs arithmetic flonums))
(fltan                                  "1"  (base) (6) (rnrs arithmetic flonums))
(fltruncate                             "1"  (base) (6) (rnrs arithmetic flonums))
(flush-output-port                      "1"  (base) (6 7) (rnrs io ports))
(flzero?                                "1"  (base) (6) (rnrs arithmetic flonums))
(fold-left                              "1"  (base) ())
(fold-right                             "1"  (base) ())
(force                                  "1"  (base) (3 4 5 6 7) (scheme lazy))
(for-each                               "1"  (base) (2 3 4 5 6 7))
(fx*                                    "R"  (base) (6) (rnrs arithmetic fixnums))
(fx*/carry                              "R"  (base) (6) (rnrs arithmetic fixnums))
(fx+                                    "R"  (base) (6) (rnrs arithmetic fixnums))
(fx+/carry                              "R"  (base) (6) (rnrs arithmetic fixnums))
(fx-                                    "R"  (base) (6) (rnrs arithmetic fixnums))
(fx-/carry                              "R"  (base) (6) (rnrs arithmetic fixnums))
(fx<=?                                  "R"  (base) (6) (rnrs arithmetic fixnums))
(fx<?                                   "R"  (base) (6) (rnrs arithmetic fixnums))
(fx=?                                   "R"  (base) (6) (rnrs arithmetic fixnums))
(fx>=?                                  "R"  (base) (6) (rnrs arithmetic fixnums))
(fx>?                                   "R"  (base) (6) (rnrs arithmetic fixnums))
(fxand                                  "1"  (base) (6) (rnrs arithmetic fixnums))
(fxarithmetic-shift                     "1"  (base) (6) (rnrs arithmetic fixnums))
(fxarithmetic-shift-left                "1"  (base) (6) (rnrs arithmetic fixnums))
(fxarithmetic-shift-right               "1"  (base) (6) (rnrs arithmetic fixnums))
(fxbit-count                            "1"  (base) (6) (rnrs arithmetic fixnums))
(fxbit-field                            "1"  (base) (6) (rnrs arithmetic fixnums))
(fxbit-set?                             "1"  (base) (6) (rnrs arithmetic fixnums))
(fxcopy-bit                             "1"  (base) (6) (rnrs arithmetic fixnums))
(fxcopy-bit-field                       "1"  (base) (6) (rnrs arithmetic fixnums))
(fxdiv                                  "1"  (base) (6) (rnrs arithmetic fixnums))
(fxdiv-and-mod                          "1"  (base) (6) (rnrs arithmetic fixnums))
(fxdiv0                                 "1"  (base) (6) (rnrs arithmetic fixnums))
(fxdiv0-and-mod0                        "1"  (base) (6) (rnrs arithmetic fixnums))
(fxeven?                                "1"  (base) (6) (rnrs arithmetic fixnums))
(fxfirst-bit-set                        "1"  (base) (6) (rnrs arithmetic fixnums))
(fxif                                   "1"  (base) (6) (rnrs arithmetic fixnums))
(fxior                                  "1"  (base) (6) (rnrs arithmetic fixnums))
(fxlength                               "1"  (base) (6) (rnrs arithmetic fixnums))
(fxmax                                  "1"  (base) (6) (rnrs arithmetic fixnums))
(fxmin                                  "1"  (base) (6) (rnrs arithmetic fixnums))
(fxmod                                  "1"  (base) (6) (rnrs arithmetic fixnums))
(fxmod0                                 "1"  (base) (6) (rnrs arithmetic fixnums))
(fxnegative?                            "1"  (base) (6) (rnrs arithmetic fixnums))
(fxnot                                  "1"  (base) (6) (rnrs arithmetic fixnums))
(fxodd?                                 "1"  (base) (6) (rnrs arithmetic fixnums))
(fxpositive?                            "1"  (base) (6) (rnrs arithmetic fixnums))
(fxreverse-bit-field                    "1"  (base) (6) (rnrs arithmetic fixnums))
(fxrotate-bit-field                     "1"  (base) (6) (rnrs arithmetic fixnums))
(fxxor                                  "1"  (base) (6) (rnrs arithmetic fixnums))
(fxzero?                                "1"  (base) (6) (rnrs arithmetic fixnums))
(gcd                                    "2"  (base) (2 3 4 5 6 7))
(get-bytevector-all                     "1"  (base) (6) (rnrs io ports))
(get-bytevector-n                       "1"  (base) (6) (rnrs io ports))
(get-bytevector-n!                      "1"  (base) (6) (rnrs io ports))
(get-bytevector-some                    "1"  (base) (6) (rnrs io ports))
(get-char                               "1"  (base) (6) (rnrs io ports))
(get-datum                              "1"  (base) (6) (rnrs io ports))
(get-environment-variable               "1"  (base) (7) (scheme process-context))
(get-environment-variables              "0"  (base) (7) (scheme process-context))
(get-line                               "1"  (base) (6) (rnrs io ports))
(get-output-bytevector                  "1"  (base) (7))
(get-output-string                      "1"  (base) (7))
(get-string-all                         "1"  (base) (6) (rnrs io ports))
(get-string-n                    	    "1"  (base) (6) (rnrs io ports))
(get-string-n!                          "1"  (base) (6) (rnrs io ports))
(get-u8                                 "1"  (base) (6) (rnrs io ports))
(greatest-fixnum                        "1"  (base) ())
(guard                                  "1"  (base) (7))
(hash                                   "1"  (base) ())
(hashtable-clear!                       "1"  (base) (6))
(hashtable-contains?                    "1"  (base) (6))
(hashtable-copy                         "1"  (base) (6))
(hashtable-delete!                      "1"  (base) (6))
(hashtable-entries                      "1"  (base) (6))
(hashtable-equivalence-function         "1"  (base) (6))
(hashtable-hash-function                "1"  (base) (6))
(hashtable-keys                         "1"  (base) (6))
(hashtable-mutable?                     "1"  (base) (6))
(hashtable-ref                          "1"  (base) (6))
(hashtable-set!                         "1"  (base) (6))
(hashtable-size                         "1"  (base) (6))
(hashtable-update!                      "1"  (base) (6))
(hashtable?                             "1"  (base) (6))
(i/o-decoding-error?                    "1"  (base) ())
(i/o-encoding-error?                    "1"  (base) ())
(i/o-error-filename                     "1"  (base) ())
(i/o-error-position                     "1"  (base) ())
(i/o-error?                             "1"  (base) ())
(i/o-file-already-exists-error?         "1"  (base) ())
(i/o-file-does-not-exist-error?         "1"  (base) ())
(i/o-file-is-read-only-error?           "1"  (base) ())
(i/o-file-protection-error?             "1"  (base) ())
(i/o-filename-error?                    "1"  (base) ())
(i/o-invalid-position-error?            "1"  (base) ())
(i/o-port-error?                        "1"  (base) ())
(i/o-read-error?                        "1"  (base) ())
(i/o-write-error?                       "1"  (base) ())
(identifier-syntax                      "1"  (base) ())
(if                                     "2o" (core syntax) (2 3 4 5 6 7))
(imag-part                              "1"  (base) (2 3 4 5 6 7) (scheme complex))
(import                                 "1"  (core syntax) (6 7))
(inexact                                "1"  (base) ())
(inexact->exact                         "1"  (base) (2 3 4 5 7))
(inexact?                               "1"  (core) (2 3 4 5 6 7))
(infinite?                              "1"  (base) ())
(input-port?                            "1"  (base) (2 3 4 5 6 7))
(integer->char                          "1"  (base) (2 3 4 5 6 7))
(integer-valued?                        "1"  (base) ())
(integer?                               "1"  (base) (2 3 4 5 6 7))
(interaction-environment                "0"  (base) (5 7) (scheme repl))
(jiffies-per-second                     "0"  (base) (7) (scheme time))
(lambda                                 "1R" (core syntax) (2 3 4 5 6 7))
(last-pair                              "1"  (base) (2 3))
(latin-1-codec                          "0"  (base) (6) (rnrs io ports))
(lazy                                   "1"  (base syntax) (7) (scheme lazy))
(lcm                                    "2"  (base) (2 3 4 5 6 7))
(least-fixnum                           "1"  (base) ())
(length                                 "1"  (base) (2 3 4 5 6 7))
(let                                    "1R" (base syntax) (2 3 4 5 6 7))
(let*                                   "1R" (base syntax) (2 3 4 5 6 7))
(let*-values                            "1R" (base syntax) (7))
(let-syntax                             "1R" (core syntax) (5 7))
(let-values                             "1R" (base syntax) (7))
(letrec                                 "1R" (base syntax) (2 3 4 5 6 7))
(letrec*                                "1R" (base syntax) (7))
(letrec-syntax                          "1R" (core syntax) (5 7))
(letrec-values                          "1R" (base syntax) ())
(library                                "1"  (base syntax) (6))
(list                                   "R"  (base) (2 3 4 5 6 7))
(list->string                           "1"  (base) (2 3 4 5 6 7))
(list->vector                           "1"  (core) (2 3 4 5 6 7))
(list-copy                              "1"  (base) (6 7))
(list-ref                               "2"  (base) (2 3 4 5 6 7))
(list-set!                              "3"  (base) (7))
(list-tail                              "2"  (base) (2 3 4 5 6 7))
(list?                                  "1"  (base) (4 5 6 7))
(load                                   "1"  (base) (2 3 5 7) (scheme load))
(log                                    "1o" (base) (2 3 4 5 6 7) (scheme inexact))
(lookahead-char                         "1"  (base) (6) (rnrs io ports))
(lookahead-u8                           "1"  (base) (6) (rnrs io ports))
(magnitude                              "1"  (base) (2 3 4 5 6 7) (scheme complex))
(make-assertion-violation               "1"  (base) ())
(make-bytevector                        "1"  (base) (7))
(make-custom-binary-input-port          "5"  (base) (6) (rnrs io ports))
(make-custom-binary-input/output-port   "6"  (base) (6) (rnrs io ports))
(make-custom-binary-output-port         "5"  (base) (6) (rnrs io ports))
(make-custom-textual-input-port         "5"  (base) (6) (rnrs io ports))
(make-custom-textual-input/output-port  "6"  (base) (6) (rnrs io ports))
(make-custom-textual-output-port        "5"  (base) (6) (rnrs io ports))
(make-enumeration                       "1"  (base) (6))
(make-eq-hashtable                      "1"  (base) (6))
(make-eqv-hashtable                     "1"  (base) (6))
(make-error                             "1"  (base) (6))
(make-hashtable                         "1"  (base) (6))
(make-i/o-decoding-error                "1"  (base) (6))
(make-i/o-encoding-error                "1"  (base) (6))
(make-i/o-error                         "1"  (base) (6))
(make-implementation-restriction-violation "1" (base) (6))
(make-irritants-condition               "1"  (base) (6))
(make-lexical-violation                 "1"  (base) (6))
(make-list                              "1"  (base) (7))
(make-message-condition                 "1"  (base) (6))
(make-no-infinities-violation           "1"  (base) (6))
(make-no-nans-violation                 "1"  (base) (6))
(make-non-continuable-violation         "1"  (base) (6))
(make-parameter                         "1"  (base) (7))
(make-polar                             "2"  (base) (2 3 4 5 6 7) (scheme complex))
(make-rectangular                       "2"  (base) (2 3 4 5 6 7) (scheme complex))
(make-serious-condition                 "1"  (base) (6))
(make-string                            "1o" (base) (2 3 4 5 6 7))
(make-transcoder                        "1o2"(base) (6) (rnrs io ports))
(make-vector                            "1o" (core) (2 3 4 5 6 7))
(make-violation                         "1"  (base) (6))
(make-warning                           "1"  (base) (6))
(make/                                  "1"  (base) ())
(map                                    "2R" (base) (2 3 4 5 6 7))
(max                                    "R"  (base) (2 3 4 5 6 7))
(member                                 "2"  (base) (2 3 4 5 6 7))
(memp                                   "2"  (base) ())
(memq                                   "2"  (base) (2 3 4 5 6 7))
(memv                                   "2"  (base) (2 3 4 5 6 7))
(min                                    "R"  (base) (2 3 4 5 6 7))
(mod                                    "2"  (base) (6))
(mod0                                   "2"  (base) (6))
(modulo                                 "2"  (base) (2 3 4 5 7))
(nan?                                   "1"  (base) (7) (scheme inexact))
(native-endianness                      "0"  (base) (6) (rnrs bytevectors))
(native-eol-style                       "0"  (base) (6) (rnrs io ports))
(native-transcoder                      "0"  (base) (6) (rnrs io ports))
(negative?                              "1"  (base) (2 3 4 5 6 7))
(newline                                "0o" (base) (2 3 4 5 6 7))
(not                                    "1"  (base) (2 3 4 5 6 7))
(null-environment                       "1"  (base) (5 7) (scheme eval))
(null?                                  "1"  (base) (2 3 4 5 6 7))
(num*                                   "1"  (base) ())
(num+                                   "1"  (base) ())
(num-                                   "1"  (base) ())
(num/                                   "1"  (base) ())
(num<                                   "1"  (base) ())
(num<=                                  "1"  (base) ())
(num=                                   "1"  (base) ())
(num>                                   "1"  (base) ())
(num>=                                  "1"  (base) ())
(number->string                         "1"  (base) (3 4 5 6 7))
(number?                                "1"  (base) (2 3 4 5 6 7))
(numerator                              "1"  (base) (3 4 5 6 7))
(odd?                                   "1"  (base) (2 3 4 5 6 7))
(open-binary-input-file                 "1"  (base) (7) (scheme file))
(open-binary-output-file                "1"  (base) (7) (scheme file))
(open-bytevector-input-port             "1o"  (base) (6) (rnrs io ports))
(open-bytevector-output-port            "0o"  (base) (6) (rnrs io ports))
(open-file-input-port                   "1o3" (base) (6) (rnrs io ports))
(open-file-input/output-port            "1o3" (base) (6) (rnrs io ports))
(open-file-output-port                  "1o3" (base) (6) (rnrs io ports))
(open-input-bytevector                  "1"  (base) (7))
(open-input-file                        "1"  (base) (2 3 5 6 7) (rnrs io simple) (scheme file))
(open-input-string                      "1"  (base) (7))
(open-output-bytevector                 "1"  (base) (7))
(open-output-file                       "1"  (base) (2 3 5 6 7) (rnrs io simple) (scheme file))
(open-output-string                     "1"  (base) (7))
(open-string-input-port                 "1o"  (base) (6) (rnrs io ports))
(open-string-output-port                "0"  (base) (6) (rnrs io ports))
(or                                     "1"  (base syntax) (2 3 4 5 6 7))
(output-port?                           "1"  (base) (2 3 4 5 6 7) (rnrs io ports))
(output-port-buffer-mode                "1"  (base) (6) (rnrs io ports))
(pair?                                  "1"  (base) (2 3 4 5 6 7))
(parameterize                           "2"  (base syntax) (7))
(peek-char                              "1"  (base) (5 6 7) (rnrs io simple))
(peek-u8                                "1"  (base) (7))
(port-open?                             "1"  (base) (7))
(port-transcoder                        "1"  (base) (6) (rnrs io ports))
(port-has-port-position?                "1"  (base) (6) (rnrs io ports))
(port-position                          "1"  (base) (6) (rnrs io ports))
(port?                                  "1"  (base) (5 6 7) (rnrs io ports))
(positive?                              "1"  (base) (2 3 4 5 6 7))
(procedure?                             "1"  (base) (3 4 5 6 7))
(put-bytevector                         "1" (base) (6) (rnrs io ports))
(put-char                               "1" (base) (6) (rnrs io ports))
(put-datum                              "1" (base) (6) (rnrs io ports))
(put-string                             "1" (base) (6) (rnrs io ports))
(put-u8                                 "1" (base) (6) (rnrs io ports))
(quasiquote                             "1"  (base syntax) (2 3 4 5 6 7))
(quasisyntax                            "1"  (base syntax) ())
(quote                                  "1"  (base syntax) (2 3 4 5 6 7))
(quotient                               "2"  (base) (2 3 4 5 7))
(raise                                  "1"  (base) (7))
(raise-continuable                      "1"  (base) (7))
(rational-valued?                       "1"  (base) ())
(rational?                              "1"  (base) (2 3 4 5 6 7))
(rationalize                            "1o" (base) (2 3 4 5 6 7))
(read                                   "0o" (base) (2 3 4 5 7) (rnrs io simple) (scheme read))
(read-bytevector                        "1"  (base) (7))
(read-bytevector!                       "1"  (base) (7))
(read-char                              "0o" (base) (2 3 4 5 6 7))
(read-line                              "1"  (base) (7))
(read-u8                                "1"  (base) (7))
(real->flonum                           "1"  (base) ())
(real-part                              "1"  (base) (2 3 4 5 6 7) (scheme complex))
(real-valued?                           "1"  (base) ())
(real?                                  "1"  (base) (2 3 4 5 6 7))
(record-accessor                        "1"  (base) (6))
(record-constructor                     "1"  (base) (6))
(record-constructor-descriptor          "1"  (base) (6))
(record-field-mutable?                  "1"  (base) (6))
(record-mutator                         "1"  (base) (6))
(record-predicate                       "1"  (base) (6))
(record-rtd                             "1"  (base) (6))
(record-type-descriptor?                "1"  (base) (6))
(record-type-field-names                "1"  (base) (6))
(record-type-generative?                "1"  (base) (6))
(record-type-name                       "1"  (base) (6))
(record-type-opaque?                    "1"  (base) (6))
(record-type-parent                     "1"  (base) (6))
(record-type-sealed?                    "1"  (base) (6))
(record-type-uid                        "1"  (base) (6))
(record?                                "1"  (base) (6))
(remainder                              "2"  (base) (2 3 4 5 7))
(remove                                 "1"  (base) (6))
(remp                                   "1"  (base) ())
(remq                                   "1"  (base) (6))
(remv                                   "1"  (base) (6))
(reverse                                "1"  (base) (2 3 4 5 6 7))
(round                                  "1"  (base) (2 3 4 5 6 7))
(round-quotient                     	"2"  (base) (7) (scheme division))
(round-remainder                    	"2"  (base) (7) (scheme division))
(round/                             	"2"  (base) (7) (scheme division))
(scheme-primitive-environment  			"1"  (base) ())
(scheme-report-environment              "1"  (base) (5 7) (scheme eval))
(serious-condition?                     "1"  (base) ())
(set!                                   "2"  (base syntax) (2 3 4 5 6 7))
(set-car!                               "2"  (base) (2 3 4 5 7))
(set-cdr!                               "2"  (base) (2 3 4 5 7))
(sin                                    "1"  (base) (2 3 4 5 6 7) (scheme inexact))
(sint-list->bytevector                  "1"  (base) ())
(sqrt                                   "1"  (base) (2 3 4 5 6 7) (scheme inexact))
(standard-error-port                    "0"  (base) (6) (rnrs io ports))
(standard-input-port                    "0"  (base) (6) (rnrs io ports))
(standard-output-port                   "0"  (base) (6) (rnrs io ports))
(string                                 "1"  (base) (5 6 7))
(string->bytevector                     "1"  (base) (6) (rnrs io ports))
(string->list                           "1"  (base) (5 6 7))
(string->number                         "1"  (base) (3 4 5 6 7))
(string->symbol                         "1"  (base) (2 3 4 5 6 7))
(string->utf16                          "1"  (core) (6))
(string->utf32                          "1"  (core) (6))
(string->utf8                           "1"  (core) (6 7))
(string->vector                         "1"  (core) (7))
(string-append                          "1"  (base) (5 6 7))
(string-ci-hash                         "1"  (base) ())
(string-ci<=?                           "2R" (base) (2 3 4 5 6 7) (scheme char))
(string-ci<?                            "2R" (base) (2 3 4 5 6 7) (scheme char))
(string-ci=?                            "2R" (base) (2 3 4 5 6 7) (scheme char))
(string-ci>=?                           "2R" (base) (2 3 4 5 6 7) (scheme char))
(string-ci>?                            "2R" (base) (2 3 4 5 6 7) (scheme char))
(string-ni<=?                           "2R" (base) (7) (scheme char normalization))
(string-ni<?                            "2R" (base) (7) (scheme char normalization))
(string-ni=?                            "2R" (base) (7) (scheme char normalization))
(string-ni>=?                           "2R" (base) (7) (scheme char normalization))
(string-ni>?                            "2R" (base) (7) (scheme char normalization))
(string-copy                            "1"  (base) (5 6 7))
(string-downcase                        "1"  (base) (6 7) (scheme char))
(string-fill!                           "1"  (base) (5 6 7))
(string-foldcase                        "1"  (base) (6 7) (scheme char))
(string-for-each                        "1"  (base) (6 7))
(string-hash                            "1"  (base) (6))
(string-length                          "1"  (base) (2 3 4 5 6 7))
(string-map                             "1"  (base) (7))
(string-normalize-nfc                   "1"  (base) (6))
(string-normalize-nfd                   "1"  (base) (6))
(string-normalize-nfkc                  "1"  (base) (6))
(string-normalize-nfkd                  "1"  (base) (6))
(string-ref                             "2"  (base) (2 3 4 5 6 7))
(string-set!                            "3"  (base) (2 3 4 5 6 7))
(string-titlecase                       "1"  (base) (6))
(string-upcase                          "1"  (base) (6 7) (scheme char))
(string<=?                              "2R" (base) (2 3 4 5 6 7))
(string<?                               "2R" (base) (2 3 4 5 6 7))
(string=?                               "2R" (base) (2 3 4 5 6 7))
(string>=?                              "2R" (base) (2 3 4 5 6 7))
(string>?                               "2R" (base) (2 3 4 5 6 7))
(string?                                "1"  (base) (2 3 4 5 6 7))
(substring                              "1"  (base) (5 6 7))
(symbol->string                         "1"  (base) (2 3 4 5 6 7))
(symbol-hash                            "1"  (base) (6))
(symbol=?                               "1"  (base) (6))
(symbol?                                "1"  (base) (2 3 4 5 6 7))
(syntax                                 "1"  (base) ())
(syntax->datum                          "1"  (base) (6) (rnrs syntax-case))
(syntax-case                            "1"  (base) ())
(syntax-error                           "1"  (base) (7))
(syntax-rules                           "1"  (base) (5 6 7))
(tan                                    "1"  (base) (2 3 4 5 6 7) (scheme inexact))
(textual-port?                          "1"  (base) (6 7) (rnrs io ports))
(throw                                  "1"  (base) (6))
(transcoded-port                        "2"  (base) (6) (rnrs io ports))
(transcoder-codec                       "1"  (base) (6) (rnrs io ports))
(transcoder-eol-style                   "1"  (base) (6) (rnrs io ports))
(transcoder-error-handling-mode         "1"  (base) (6) (rnrs io ports))
(transcript-off                         "0"  (base) (2 3 4 5))
(transcript-on                          "1"  (base) (2 3 4 5))
(truncate                               "1"  (base) (2 3 4 5 6 7))
(truncate-quotient                     	"2"  (base) (7) (scheme division))
(truncate-remainder                    	"2"  (base) (7) (scheme division))
(truncate/                             	"2"  (base) (7) (scheme division))
(type=?                                 "1"  (base) ())
(u8-list->bytevector                    "1"  (base) (6))
(u8-ready?                              "1"  (base) (7))
(u8-vector->bytevector                  "1"  (base) ())
(uint-list->bytevector                  "1"  (base) (6))
(undefined-violation?                   "1"  (base) (6))
(unless                                 "1"  (base) (6))
(unquote                                "1"  (base syntax) (2 3 4 5 6 7))
(unquote-splicing                       "1"  (base syntax) (2 3 4 5 6 7))
(unsyntax                               "1"  (base syntax) (6))
(unsyntax-splicing                      "1"  (base syntax) (6))
(utf-16-codec                           "0"  (base) (6) (rnrs io ports))
(utf-8-codec                            "0"  (base) (6) (rnrs io ports))
(utf16->string                          "1"  (base) ())
(utf32->string                          "1"  (base) ())
(utf8->string                           "1"  (base) (6 7))
(values                                 "1"  (base) (5 6 7))
(vector                                 "R"  (base) (2 3 4 5 6 7))
(vector->list                           "1"  (core) (2 3 4 5 6 7))
(vector->string                         "1"  (core) (7))
(vector-copy                            "1"  (base) (7))
(vector-fill!                           "2"  (base) (2 3 4 5 6 7))
(vector-for-each                        "1"  (base) (6 7))
(vector-length                          "1"  (base) (2 3 4 5 6 7))
(vector-map                             "1"  (base) (6 7))
(vector-ref                             "2"  (base) (2 3 4 5 6 7))
(vector-set!                            "3"  (base) (2 3 4 5 6 7))
(vector-sort                            "1"  (base) (6) (rnrs sorting))
(vector-sort!                           "1"  (base) (6) (rnrs sorting))
(vector?                                "1"  (base) (2 3 4 5 6 7))
(violation?                             "1"  (base) ())
(warning?                               "1"  (base) ())
(when                                   "1"  (base) (7))
(with-exception-handler                 "2"  (base) (6 7))
(with-input-from-file                   "2"  (base) (2 3 4 5 6 7) (rnrs io simple) (scheme file))
(with-output-to-file                    "2"  (base) (2 3 4 5 6 7) (rnrs io simple) (scheme file))
(write                                  "1o" (base) (2 3 4 5 6 7) (rnrs io simple) (scheme write))
(write-simple                           "1o" (base) (7) (scheme write))
(write-bytevector                       "1"  (base) (7))
(write-char                             "1o" (base) (2 3 4 5 6 7) (rnrs io simple))
(write-partial-bytevector               "1"  (base) (7))
(write-u8                               "1"  (base) (7))
(zero?                                  "1"  (base) (2 3 4 5 6 7))

);quote
