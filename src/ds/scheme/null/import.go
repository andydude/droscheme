package ds_any_env_null
import . "ds/any"
import "ds/any/syntax"
var _ds_any_syntax = ds_any_syntax.Export()
var listZKmatchZS = _ds_any_syntax.Ref("list-match?").(Named)
var _listZKmatchZS = listZKmatchZS.Value().(func(patt, syntax, env Any)Any)
var listZKreplace = _ds_any_syntax.Ref("list-replace").(Named)
var _listZKreplace = listZKreplace.Value().(func(temp, env Any)Any)
var symbolZKmatchZS = _ds_any_syntax.Ref("symbol-match?").(Named)
var _symbolZKmatchZS = symbolZKmatchZS.Value().(func(patt, syntax, env Any)Any)
var symbolZKreplace = _ds_any_syntax.Ref("symbol-replace").(Named)
var _symbolZKreplace = symbolZKreplace.Value().(func(temp, env Any)Any)
var syntaxZKmatchZS = _ds_any_syntax.Ref("syntax-match?").(Named)
var _syntaxZKmatchZS = syntaxZKmatchZS.Value().(func(patt, syntax, env Any)Any)
var syntaxZKreplace = _ds_any_syntax.Ref("syntax-replace").(Named)
var _syntaxZKreplace = syntaxZKreplace.Value().(func(temp, env Any)Any)
var read = _ds_any_syntax.Ref("read").(Named)
var _read = read.Value().(func(Rest ...Any)Any)
var write = _ds_any_syntax.Ref("write").(Named)
var _write = write.Value().(func(obj Any, Rest ...Any)Any)

var begin = _ds_any_syntax.Ref("begin").(Named)
var __case = _ds_any_syntax.Ref("case").(Named)
var cond = _ds_any_syntax.Ref("cond").(Named)
var define = _ds_any_syntax.Ref("define").(Named)
var defineZKlibrary = _ds_any_syntax.Ref("define-library").(Named)
var library = _ds_any_syntax.Ref("library").(Named)
var do = _ds_any_syntax.Ref("do").(Named)
var __if = _ds_any_syntax.Ref("if").(Named)
var lambda = _ds_any_syntax.Ref("lambda").(Named)
var let = _ds_any_syntax.Ref("let").(Named)
var letZH = _ds_any_syntax.Ref("let*").(Named)
var letrec = _ds_any_syntax.Ref("letrec").(Named)
var quasiquote = _ds_any_syntax.Ref("quasiquote").(Named)
var quote = _ds_any_syntax.Ref("quote").(Named)
var setZA = _ds_any_syntax.Ref("set!").(Named)
var unquote = _ds_any_syntax.Ref("unquote").(Named)
var unquoteZKsplicing = _ds_any_syntax.Ref("unquote-splicing").(Named)
