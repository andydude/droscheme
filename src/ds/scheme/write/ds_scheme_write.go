package ds_scheme_write

import "ds/any"

var (
	_ds_any                  = (ds_any.Export)()
	__append                 = _ds_any["append"].(func(a interface{}, rest ...interface{}) interface{})
	apply                    = _ds_any["apply"].(func(proc interface{}, args ...interface{}) interface{})
	applyZKlist              = _ds_any["apply-list"].(func(proc interface{}, args interface{}) interface{})
	applyZKvector            = _ds_any["apply-vector"].(func(proc interface{}, args interface{}) interface{})
	primitiveZKapplyZKvector = _ds_any["primitive-apply-vector"].(func(proc interface{}, args interface{}) interface{})
	booleanZKand             = _ds_any["boolean-and"].(func(rest ...interface{}) interface{})
	booleanZKor              = _ds_any["boolean-or"].(func(rest ...interface{}) interface{})
	booleanZQZS              = _ds_any["boolean=?"].(func(a interface{}, b interface{}) interface{})
	booleanZS                = _ds_any["boolean?"].(func(a interface{}) interface{})
	boolean                  = _ds_any["boolean"].(func(a interface{}) interface{})
	bytevectorZKZRu8ZKlist   = _ds_any["bytevector->u8-list"].(func(a interface{}) interface{})
	bytevectorZKZRu8ZKvector = _ds_any["bytevector->u8-vector"].(func(a interface{}) interface{})
	bytevectorZS             = _ds_any["bytevector?"].(func(a interface{}) interface{})
	call                     = _ds_any["call"].(func(proc interface{}, rest ...interface{}) interface{})
	car                      = _ds_any["car"].(func(a interface{}) interface{})
	cdr                      = _ds_any["cdr"].(func(a interface{}) interface{})
	cons                     = _ds_any["cons"].(func(a interface{}, b interface{}) interface{})
	eofZKobject              = _ds_any["eof-object"].(func() interface{})
	eofZKobjectZS            = _ds_any["eof-object?"].(func(a interface{}) interface{})
	equalZS                  = _ds_any["equal?"].(func(a interface{}, b interface{}) interface{})
	appendZA                 = _ds_any["append!"].(func(rest ...interface{}) interface{})
	cdrs                     = _ds_any["cdrs"].(func(lists interface{}) interface{})
	cars                     = _ds_any["cars"].(func(lists interface{}) interface{})
	carsZI                   = _ds_any["cars+"].(func(lists interface{}, lastZKelt interface{}) interface{})
	foldZKright              = _ds_any["fold-right"].(func(kons interface{}, knil interface{}, lis1 interface{}, lists ...interface{}) interface{})
	immZKlistZS              = _ds_any["imm-list?"].(func(a interface{}) interface{})
	immZKnull                = _ds_any["imm-null"].(func(o ...interface{}) interface{})
	immZKnullZS              = _ds_any["imm-null?"].(func(a interface{}) interface{})
	immZKpairZS              = _ds_any["imm-pair?"].(func(a interface{}) interface{})
	immZKstarZS              = _ds_any["imm-star?"].(func(a interface{}) interface{})
	immZKstarZKlength        = _ds_any["imm-star-length"].(func(a interface{}) interface{})
	length                   = _ds_any["length"].(func(ls interface{}) interface{})
	list                     = _ds_any["list"].(func(o ...interface{}) interface{})
	listZH                   = _ds_any["list*"].(func(o ...interface{}) interface{})
	listZI                   = _ds_any["list+"].(func(first interface{}, rest ...interface{}) interface{})
	listZKZRstring           = _ds_any["list->string"].(func(a interface{}) interface{})
	listZKZRvector           = _ds_any["list->vector"].(func(ls interface{}) interface{})
	listZS                   = _ds_any["list?"].(func(a interface{}) interface{})
	map1                     = _ds_any["map1"].(func(proc interface{}, ls interface{}) interface{})
	__map                    = _ds_any["map"].(func(proc interface{}, rest ...interface{}) interface{})
	any1                     = _ds_any["any1"].(func(pred interface{}, ls interface{}) interface{})
	any                      = _ds_any["any"].(func(pred interface{}, rest ...interface{}) interface{})
	every1                   = _ds_any["every1"].(func(pred interface{}, ls interface{}) interface{})
	every                    = _ds_any["every"].(func(pred interface{}, rest ...interface{}) interface{})
	mZKnullZS                = _ds_any["m-null?"].(func(a interface{}) interface{})
	mZKpairZS                = _ds_any["m-pair?"].(func(a interface{}) interface{})
	mZKstarZS                = _ds_any["m-star?"].(func(a interface{}) interface{})
	mZKstringZS              = _ds_any["m-string?"].(func(a interface{}) interface{})
	makeZKbytevector         = _ds_any["make-bytevector"].(func(k interface{}) interface{})
	makeZKenvironment        = _ds_any["make-environment"].(func() interface{})
	makeZKstring             = _ds_any["make-string"].(func(k interface{}) interface{})
	makeZKvector             = _ds_any["make-vector"].(func(k interface{}) interface{})
	not                      = _ds_any["not"].(func(a interface{}) interface{})
	null                     = _ds_any["null"].(func(o ...interface{}) interface{})
	nullZS                   = _ds_any["null?"].(func(a interface{}) interface{})
	objectZKequalZS          = _ds_any["object-equal?"].(func(a interface{}, b interface{}) interface{})
	pairZS                   = _ds_any["pair?"].(func(a interface{}) interface{})
	s8ZS                     = _ds_any["s8?"].(func(a interface{}) interface{})
	s16ZS                    = _ds_any["s16?"].(func(a interface{}) interface{})
	s32ZS                    = _ds_any["s32?"].(func(a interface{}) interface{})
	s64ZS                    = _ds_any["s64?"].(func(a interface{}) interface{})
	stringZKappend           = _ds_any["string-append"].(func(rest ...interface{}) interface{})
	immZKstringZKZRstring    = _ds_any["imm-string->string"].(func(str interface{}) interface{})
	stringZKZRimmZKstring    = _ds_any["string->imm-string"].(func(str interface{}) interface{})
	symbolZKZRstring         = _ds_any["symbol->string"].(func(a interface{}) interface{})
	symbolZQZS               = _ds_any["symbol=?"].(func(a interface{}, b interface{}) interface{})
	symbolZS                 = _ds_any["symbol?"].(func(a interface{}) interface{})
	typeZKcheck              = _ds_any["type-check"].(func(expected interface{}, irrs ...interface{}) interface{})
	typeZKerror              = _ds_any["type-error"].(func(expected interface{}, irr interface{}) interface{})
	u8ZKlistZKZRbytevector   = _ds_any["u8-list->bytevector"].(func(a interface{}) interface{})
	u8ZKvectorZKZRbytevector = _ds_any["u8-vector->bytevector"].(func(a interface{}) interface{})
	u8ZS                     = _ds_any["u8?"].(func(a interface{}) interface{})
	u16ZS                    = _ds_any["u16?"].(func(a interface{}) interface{})
	u32ZS                    = _ds_any["u32?"].(func(a interface{}) interface{})
	u64ZS                    = _ds_any["u64?"].(func(a interface{}) interface{})
	vector                   = _ds_any["vector"].(func(o ...interface{}) interface{})
	vectorZKZRlist           = _ds_any["vector->list"].(func(a interface{}) interface{})
	vectorZKZRstring         = _ds_any["vector->string"].(func(a interface{}) interface{})
	vectorZKlength           = _ds_any["vector-length"].(func(vc interface{}) interface{})
	vectorZKmap              = _ds_any["vector-map"].(func(proc interface{}, vc interface{}) interface{})
	vectorZS                 = _ds_any["vector?"].(func(a interface{}) interface{})
	void                     = _ds_any["void"].(func() interface{})
	voidZS                   = _ds_any["void?"].(func(a interface{}) interface{})
	ZKZRimmZKstring          = _ds_any["->imm-string"].(func(str interface{}) interface{})
	ZKZRschemeZKstring       = _ds_any["->scheme-string"].(func(a interface{}) interface{})
	ZKZRstring               = _ds_any["->string"].(func(str interface{}) interface{})
)

func Export() map[string]interface{} {
	return map[string]interface{}{"write": write}
}

func display(str interface{}) interface{} {
	print(str)
	return nil
}

func write(obj interface{}, port interface{}) interface{} {
	return display(ZKZRschemeZKstring(obj))
}
