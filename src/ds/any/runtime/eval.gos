(package
  ds_any_runtime
  (import (dot "ds/any"))
  (var (= eval-syntax
          (NewSyntax _eval-syntax "eval-syntax")))
  (func _eval-syntax
        (#(env (ptr Env)) #(exp Any))
        Any
        (return (_eval exp env)))
  (var (= eval (NewProc _eval "eval")))
  (func _eval
        (#(exp Any) #(env Any))
        Any
        (unless
          (as (_pair? exp) &bool)
          (return (_eval-literal exp env)))
        (:= (cas _) (_car+cdr exp))
        (when (as (_symbol? cas) &bool)
              (:= value ((dot (as env (ptr Env)) Ref) cas))
              (when* (:= (trans ok) (as value Syntax))
                     ok
                     (return (trans.Transform (as env (ptr Env)) exp))))
        (return
          (_eval-vector
            (_list->vector exp)
            (as env (ptr Env)))))
  (var (= eval-literal
          (NewProc _eval-literal "eval-literal")))
  (func _eval-literal
        (#(exp Any) #(env Any))
        Any
        (unless*
          (:= (_ ok) (as exp Evaler))
          ok
          (return exp))
        (return
          ((dot (as exp Evaler) Eval) (as env (ptr Env)))))
  (var (= eval-vector
          (NewProc _eval-vector "eval-vector")))
  (func _eval-vector
        (#(exp Any) #(env Any))
        Any
        (:= arg
            (as ((dot (as exp Vector) Eval) (as env (ptr Env)))
                Vector))
        (:= (car cdr)
            (index arg 0)
            (Vector (index arg 1 #f)))
        (unless
          (as (_procedure? car) &bool)
          (_error "expected procedure"))
        (unless*
          (:= (_ ok) (as car Proc))
          ok
          (_error "expected procedure (Applier)"))
        (return ((dot (as car Proc) Apply) cdr))))
