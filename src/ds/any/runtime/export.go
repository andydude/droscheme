// Droscheme - a Scheme implementation
// Copyright Â© 2012 Andrew Robbins
//
// This program is free software: it is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. You can redistribute it and/or modify it under the
// terms of the GNU Lesser General Public License (LGPLv3): <http://www.gnu.org/licenses/>.

package ds_any_runtime
import . "ds/any"
func Export() (env *Env) {
	env = NewEnv()
	env.Add(apply)
	env.Add(booleanZQZS)
	env.Add(booleanZS)
	env.Add(bytevector)
	env.Add(bytevectorZKZRu8ZKlist)
	env.Add(bytevectorZKZRu8ZKvector)
	env.Add(bytevectorZS)
	env.Add(car)
	env.Add(carZIcdr)
	env.Add(cdr)
	env.Add(charZKZRinteger)
	env.Add(charZQZS)
	env.Add(charZS)
	env.Add(cons)
	env.Add(currentZKerrorZKport)
	env.Add(currentZKinputZKport)
	env.Add(currentZKoutputZKport)
	env.Add(emptyZS)
	env.Add(eofZKobject)
	env.Add(eofZKobjectZS)
	env.Add(eqZS)
	env.Add(equalZS)
	env.Add(eqvZS)
	env.Add(__error)
	env.Add(errorZKobject)
	env.Add(errorZKobjectZKirritants)
	env.Add(errorZKobjectZKmessage)
	env.Add(errorZKobjectZS)
	env.Add(eval)
	env.Add(evalZKliteral)
	env.Add(evalZKvector)
	env.Add(exactZQZS)
	env.Add(exactZS)
	env.Add(objectZKequalZS)
	env.Add(pointerZKof)
	env.Add(inexactZQZS)
	env.Add(inexactZS)
	env.Add(integerZKZRchar)
	//env.Add(kindZKZRstring)
	//env.Add(kindZKof)
	env.Add(lastZKpair)
	env.Add(length)
	env.Add(list)
	env.Add(listZH)
	//env.Add(listZHZKZRvector)
	env.Add(listZI)
	env.Add(listZKZRstring)
	env.Add(listZKZRvector)
	env.Add(listZS)
	env.Add(makeZKbytevector)
	env.Add(makeZKlist)
	env.Add(makeZKparameter)
	env.Add(makeZKstring)
	env.Add(makeZKvector)
	env.Add(not)
	env.Add(null)
	env.Add(nullZS)
	env.Add(objectZKhash)
	env.Add(pairZS)
	env.Add(pointerZQZS)
	env.Add(procedureZS)
	env.Add(raise)
	env.Add(__string)
	env.Add(stringZKZRlist)
	env.Add(stringZKZRsymbol)
	env.Add(stringZKZRvector)
	env.Add(stringZS)
	env.Add(symbolZKZRstring)
	env.Add(symbolZQZS)
	env.Add(symbolZS)
	env.Add(typeZQZS)
	env.Add(u32ZKZRbytevector)
	env.Add(u8ZKlistZKZRbytevector)
	env.Add(u8ZKvectorZKZRbytevector)
	env.Add(u8ZS)
	env.Add(values)
	env.Add(vector)
	env.Add(vectorZKZRlist)
	//env.Add(vectorZKZRlistZH)
	env.Add(vectorZKZRstring)
	env.Add(vectorZS)
	env.Add(void)
	env.Add(voidZS)
	env.Add(__ZKZRimmutableZKstring)
	env.Add(__ZKZRschemeZKstring)
	env.Add(__ZKZRstring)
	return
}
