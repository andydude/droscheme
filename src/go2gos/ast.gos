(package
  main
  (import
    "go/ast"
    "go/parser"
    "go/token"
    "io"
    "os"
    "strings")
  (define-type Buffer (struct))
  (define-type Compiler (struct #(wr io.Writer)))
  (define-func
    (NewBuffer (ptr Buffer))
    (return (bitwise-and #(Buffer))))
  (define-func
    (NewCompiler (ptr Compiler))
    (return (bitwise-and #(Compiler))))
  (define-func
    (#(c (ptr Compiler))
     Compile
     #(rd io.Reader)
     #(wr io.Writer)
     #(err error))
    (= c.wr wr)
    (:= fset (token.NewFileSet))
    (:= (file err) (parser.ParseFile fset "" rd 0))
    (when (!= err (nil)) (return err))
    (c.emitFile file)
    (when* (:= (f ok) (as c.wr io.Closer))
           ok
           (= err (f.Close)))
    (return))
  (define-func
    (#(c (ptr Compiler))
     compileFile
     #(filename string)
     error)
    (return (c.compileFileTo filename os.Stdout)))
  (define-func
    (#(c (ptr Compiler))
     compileFileTo
     #(filename string)
     #(wr io.Writer)
     error)
    (:= (rd err) (os.Open filename))
    (when (!= err (nil)) (panic err))
    (return (c.Compile rd wr)))
  (define-func
    (#(c (ptr Compiler))
     compileString
     #(input string)
     error)
    (return
      (c.Compile (strings.NewReader input) os.Stdout)))
  (define-func
    (#(c (ptr Compiler))
     Visit
     #(node ast.Node)
     #(w ast.Visitor))
    (type! (:= a (as node type))
           (((ptr ast.GenDecl))
            (c.emitGenDecl a)
            (return (nil)))
           (((ptr ast.FuncDecl))
            (c.emitFuncDecl a)
            (return (nil))))
    (return c))
  (define-func
    (goOpToSchemeOp #(name string) string)
    (define-var
      (= table
         #((map-type string string)
           (: "!" "not")
           (: "&" "bitwise-and")
           (: "&&" "and")
           (: "&=" "bitwise-and=")
           (: "&^" "bitwise-but")
           (: "&^=" "bitwise-but=")
           (: "^" "bitwise-xor")
           (: "^=" "bitwise-xor=")
           (: "|" "bitwise-or")
           (: "|=" "bitwise-or=")
           (: "||" "or"))))
    (when (!= (index table name) "")
          (return (index table name)))
    (return name))
  (define-func
    (goIdToSchemeId #(name string) string)
    (define-var
      (= table
         #((map-type string string)
           (: "true" "#t")
           (: "false" "#f")
           (: "nil" "(nil)"))))
    (when (!= (index table name) "")
          (return (index table name)))
    (return name))
  (define-func
    (goStringToSchemeString
      #(node (ptr ast.BasicLit))
      string)
    (return node.Value)))
