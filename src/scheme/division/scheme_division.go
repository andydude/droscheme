// Droscheme - a Scheme implementation
// Copyright Â© 2012 Andrew Robbins
//
// This program is free software: it is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. You can redistribute it and/or modify it under the
// terms of the GNU Lesser General Public License (LGPL): <http://www.gnu.org/licenses/>.

// Generated by gosc from scheme_division.sld
package scheme_division
import "ds/base"
import . "ds/any"
var ceiling = NewProc(_ceiling, "ceiling")
func _ceiling(x Any) Any {
	return _ZK(_floor(_ZK(x)))
}
var ceilingZKquotient = NewProc(_ceilingZKquotient, "ceiling-quotient")
func _ceilingZKquotient(a, b Any) Any {
	return _ceiling(_ZM(a, b))
}
var ceilingZKremainder = NewProc(_ceilingZKremainder, "ceiling-remainder")
func _ceilingZKremainder(a, b Any) Any {
	return _ZK(a, (b * _ceilingZKquotient(a, b)))
}
var ceilingZM = NewProc(_ceilingZM, "ceiling/")
func _ceilingZM(a, b Any) Any {
	return func(q Any) Any {
		return _values(q, _ZK(a, (b*q)))
	}(_ceilingZKquotient(a, b))
}
var centered = NewProc(_centered, "centered")
func _centered(x Any) Any {
	return _floor(x + 1/2)
}
var centeredZKquotient = NewProc(_centeredZKquotient, "centered-quotient")
func _centeredZKquotient(a, b Any) Any {
	return _centered(_ZM(a, b))
}
var centeredZKremainder = NewProc(_centeredZKremainder, "centered-remainder")
func _centeredZKremainder(a, b Any) Any {
	return _ZK(a, (b * _centeredZKquotient(a, b)))
}
var centeredZM = NewProc(_centeredZM, "centered/")
func _centeredZM(a, b Any) Any {
	return func(q Any) Any {
		return _values(q, _ZK(a, (b*q)))
	}(_centeredZKquotient(a, b))
}
var euclideanZKquotient = NewProc(_euclideanZKquotient, "euclidean-quotient")
func _euclideanZKquotient(a, b Any) Any {
	return (_sign(b) * _floor(_ZM(a, _abs(b))))
}
var euclideanZKremainder = NewProc(_euclideanZKremainder, "euclidean-remainder")
func _euclideanZKremainder(a, b Any) Any {
	return _ZK(a, (b * _euclideanZKquotient(a, b)))
}
var euclideanZM = NewProc(_euclideanZM, "euclidean/")
func _euclideanZM(a, b Any) Any {
	return func(q Any) Any {
		return _values(q, _ZK(a, (b*q)))
	}(_euclideanZKquotient(a, b))
}
var floorZKquotient = NewProc(_floorZKquotient, "floor-quotient")
func _floorZKquotient(a, b Any) Any {
	return _floor(_ZM(a, b))
}
var floorZKremainder = NewProc(_floorZKremainder, "floor-remainder")
func _floorZKremainder(a, b Any) Any {
	return _ZK(a, (b * _floorZKquotient(a, b)))
}
var floorZM = NewProc(_floorZM, "floor/")
func _floorZM(a, b Any) Any {
	return func(q Any) Any {
		return _values(q, _ZK(a, (b*q)))
	}(_floorZKquotient(a, b))
}
var roundZKquotient = NewProc(_roundZKquotient, "round-quotient")
func _roundZKquotient(a, b Any) Any {
	return _round(_ZM(a, b))
}
var roundZKremainder = NewProc(_roundZKremainder, "round-remainder")
func _roundZKremainder(a, b Any) Any {
	return _ZK(a, (b * _roundZKquotient(a, b)))
}
var roundZM = NewProc(_roundZM, "round/")
func _roundZM(a, b Any) Any {
	return func(q Any) Any {
		return _values(q, _ZK(a, (b*q)))
	}(_roundZKquotient(a, b))
}
var truncate = NewProc(_truncate, "truncate")
func _truncate(x Any) Any {
	return (_sign(x) * _floor(_abs(x)))
}
var truncateZKquotient = NewProc(_truncateZKquotient, "truncate-quotient")
func _truncateZKquotient(a, b Any) Any {
	return _truncate(_ZM(a, b))
}
var truncateZKremainder = NewProc(_truncateZKremainder, "truncate-remainder")
func _truncateZKremainder(a, b Any) Any {
	return _ZK(a, (b * _truncateZKquotient(a, b)))
}
var truncateZM = NewProc(_truncateZM, "truncate/")
func _truncateZM(a, b Any) Any {
	return func(q Any) Any {
		return _values(q, _ZK(a, (b*q)))
	}(_truncateZKquotient(a, b))
}
func Export() (env *Env) {
	env = NewEnv()
	env.Add(ceilingZKquotient)
	env.Add(ceilingZKremainder)
	env.Add(ceilingZM)
	env.Add(centeredZKquotient)
	env.Add(centeredZKremainder)
	env.Add(centeredZM)
	env.Add(euclideanZKquotient)
	env.Add(euclideanZKremainder)
	env.Add(euclideanZM)
	env.Add(floorZKquotient)
	env.Add(floorZKremainder)
	env.Add(floorZM)
	env.Add(roundZKquotient)
	env.Add(roundZKremainder)
	env.Add(roundZM)
	env.Add(truncateZKquotient)
	env.Add(truncateZKremainder)
	env.Add(truncateZM)
	return
}
