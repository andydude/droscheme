// Droscheme - a Scheme implementation
// Copyright Â© 2012 Andrew Robbins
//
// This program is free software: it is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. You can redistribute it and/or modify it under the
// terms of the GNU Lesser General Public License (LGPL): <http://www.gnu.org/licenses/>.

// generated by gos2go from scheme_read.sld
package scheme_read
import . "ds/any"
import "ds/port"
var _ds_port = ds_port.Env()
var currentZKinputZKport = _ds_port.Ref("current-input-port")
var _currentZKinputZKport = currentZKinputZKport.(*Proc).call.(func()Any)
var read = &Proc{
	call: _read,
	name: "read",
}
func _read(Rest ...Any) Any {
	o := func() Any {
		if (len(Rest) > 0).(bool) {
			return Rest[0]
		}
		return _currentZKinputZKport()
	}()
	return o.(InputPort).ReadDatum()
}
func Env() (env *Env) {
	env = NewEnv()
	env.Add(read)
	return
}
