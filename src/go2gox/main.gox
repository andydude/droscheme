<go:package xmlns:go='bla1' xmlns:m='bla3' xmlns:xsd='bla2'>
  <m:ci>main</m:ci>
  <go:import>
    <m:cs>flag</m:cs>
    <m:cs>os</m:cs>
    <m:cs>os/exec</m:cs>
    <m:cs>runtime/pprof</m:cs>
  </go:import>
  <go:var>
    <go:is>
      <m:ci>
      debug</m:ci>
      <m:apply>
        <m:apply>
          <go:dot/>
          <m:ci>
          flag</m:ci>
          <m:ci>
          Bool</m:ci>
        </m:apply>
        <m:cs>
        d</m:cs>
        <m:false/>
        <m:cs>
        print debugging info</m:cs>
      </m:apply>
    </go:is>
  </go:var>
  <go:var>
    <go:is>
      <m:ci>
      raw</m:ci>
      <m:apply>
        <m:apply>
          <go:dot/>
          <m:ci>
          flag</m:ci>
          <m:ci>
          Bool</m:ci>
        </m:apply>
        <m:cs>
        r</m:cs>
        <m:false/>
        <m:cs>
        print unformatted output</m:cs>
      </m:apply>
    </go:is>
  </go:var>
  <go:var>
    <go:is>
      <m:ci>
      inputname</m:ci>
      <m:apply>
        <m:apply>
          <go:dot/>
          <m:ci>
          flag</m:ci>
          <m:ci>
          String</m:ci>
        </m:apply>
        <m:cs>
        i</m:cs>
        <m:cs>
        -</m:cs>
        <m:cs>
        input filename</m:cs>
      </m:apply>
    </go:is>
  </go:var>
  <go:var>
    <go:is>
      <m:ci>
      outputname</m:ci>
      <m:apply>
        <m:apply>
          <go:dot/>
          <m:ci>
          flag</m:ci>
          <m:ci>
          String</m:ci>
        </m:apply>
        <m:cs>
        o</m:cs>
        <m:cs>
        -</m:cs>
        <m:cs>
        output filename</m:cs>
      </m:apply>
    </go:is>
  </go:var>
  <go:function>
    <m:ci>compile</m:ci>
    <go:void/>
    (:= (<m:ci>rd</m:ci> <m:ci>err</m:ci>
    )
    <m:apply>
      <go:function>
        <go:values>
          <m:ci>file<m:sep/>
            <m:apply><go:ptr/>
              <m:apply>
                <go:dot/>
                <m:ci>os</m:ci>
                <m:ci>File</m:ci>
              </m:apply>
            </m:apply>
          </m:ci>
          <m:ci>err<m:sep/>
          <m:error/>
        </m:ci>
        </go:values>
      (when (== <m:apply>
      <go:ptr/>
      inputname</m:apply>
      <m:cs>
      -</m:cs>
      )  <m:apply>
      <go:return/>
      <m:apply>
        <go:dot/>
        <m:ci>
        os</m:ci>
        <m:ci>
        Stdin</m:ci>
      </m:apply>
      <go:nil/>
    </m:apply>
    ) <m:apply>
    <go:return/>
    <m:apply>
      <m:apply>
        <go:dot/>
        <m:ci>
        os</m:ci>
        <m:ci>
        Open</m:ci>
      </m:apply>
      <m:apply>
        <go:ptr/>
      inputname</m:apply>
    </m:apply>
  </m:apply>
    </go:function>
  </m:apply>
  ) (when (!= <m:ci>
  err</m:ci>
  <go:nil/>
  )  <m:apply>
  <go:panic/>
  <m:ci>
  err</m:ci>
</m:apply>
) (:= (<m:ci>
wr</m:ci>
<m:ci>
err</m:ci>
) <m:apply>
<go:function>
  <go:values>
    <m:ci>
      file<m:sep/>
      <m:apply>
        <go:ptr/>
        <m:apply>
          <go:dot/>
          <m:ci>
          os</m:ci>
          <m:ci>
          File</m:ci>
        </m:apply>
      </m:apply>
    </m:ci>
    <m:ci>
      err<m:sep/>
      <m:error/>
    </m:ci>
  </go:values>
  (when (== <m:apply>
  <go:ptr/>
  outputname</m:apply>
  <m:cs>
  -</m:cs>
  )  <m:apply>
  <go:return/>
  <m:apply>
    <go:dot/>
    <m:ci>
    os</m:ci>
    <m:ci>
    Stdout</m:ci>
  </m:apply>
  <go:nil/>
</m:apply>
) <m:apply>
<go:return/>
<m:apply>
  <m:apply>
    <go:dot/>
    <m:ci>
    os</m:ci>
    <m:ci>
    Open</m:ci>
  </m:apply>
  <m:apply>
    <go:ptr/>
  outputname</m:apply>
</m:apply>
</m:apply>
</go:function>
</m:apply>
) (when (!= <m:ci>
err</m:ci>
<go:nil/>
)  <m:apply>
<go:panic/>
<m:ci>
err</m:ci>
</m:apply>
) (:= (<m:ci>
xmllint</m:ci>
<m:ci>
err</m:ci>
) <m:apply>
<m:apply>
  <go:dot/>
  <m:ci>
  exec</m:ci>
  <m:ci>
  LookPath</m:ci>
</m:apply>
<m:cs>
xmllint</m:cs>
</m:apply>
) (when (<m:or/>
(!= <m:ci>
err</m:ci>
<go:nil/>
) <m:apply>
<go:ptr/>
raw</m:apply>
)  <m:apply>
<m:apply>
  <go:dot/>
  <m:apply>
    <m:ci>
    NewCompiler</m:ci>
  </m:apply>
  <m:ci>
  Compile</m:ci>
</m:apply>
<m:ci>
rd</m:ci>
<m:ci>
wr</m:ci>
</m:apply>
<m:apply>
  <m:apply>
    <go:dot/>
    <m:ci>
    rd</m:ci>
    <m:ci>
    Close</m:ci>
  </m:apply>
</m:apply>
<m:apply>
  <go:return/>
</m:apply>
) (:= <m:ci>
cmd</m:ci>
<m:apply>
  <m:apply>
    <go:dot/>
    <m:ci>
    exec</m:ci>
    <m:ci>
    Command</m:ci>
  </m:apply>
  <m:ci>
  xmllint</m:ci>
  <m:cs>
  --format</m:cs>
  <m:cs>
  -</m:cs>
</m:apply>
) (= <m:apply>
<go:dot/>
<m:ci>
cmd</m:ci>
<m:ci>
Stdout</m:ci>
</m:apply>
<m:apply>
  <go:dot/>
  <m:ci>
  os</m:ci>
  <m:ci>
  Stdout</m:ci>
</m:apply>
) (= <m:apply>
<go:dot/>
<m:ci>
cmd</m:ci>
<m:ci>
Stderr</m:ci>
</m:apply>
<m:apply>
  <go:dot/>
  <m:ci>
  os</m:ci>
  <m:ci>
  Stderr</m:ci>
</m:apply>
) (:= (<m:ci>
pr</m:ci>
<m:ci>
err</m:ci>
) <m:apply>
<m:apply>
  <go:dot/>
  <m:ci>
  cmd</m:ci>
  <m:ci>
  StdinPipe</m:ci>
</m:apply>
</m:apply>
) (when (!= <m:ci>
err</m:ci>
<go:nil/>
)  <m:apply>
<go:panic/>
<m:ci>
err</m:ci>
</m:apply>
) <m:apply>
<m:apply>
  <go:dot/>
  <m:apply>
    <m:ci>
    NewCompiler</m:ci>
  </m:apply>
  <m:ci>
  Compile</m:ci>
</m:apply>
<m:ci>
rd</m:ci>
<m:ci>
pr</m:ci>
</m:apply>
(= <m:ci>
err</m:ci>
<m:apply>
  <m:apply>
    <go:dot/>
    <m:ci>
    cmd</m:ci>
    <m:ci>
    Run</m:ci>
  </m:apply>
</m:apply>
) (when (!= <m:ci>
err</m:ci>
<go:nil/>
)  <m:apply>
<go:panic/>
<m:ci>
err</m:ci>
</m:apply>
) <m:apply>
<m:apply>
  <go:dot/>
  <m:ci>
  rd</m:ci>
  <m:ci>
  Close</m:ci>
</m:apply>
</m:apply>
</go:function>
<go:function>
  <m:ci>
  main</m:ci>
  <go:void/>
  <m:apply>
    <m:apply>
      <go:dot/>
      <m:ci>
      flag</m:ci>
      <m:ci>
      Parse</m:ci>
    </m:apply>
  </m:apply>
  <m:apply>
    <go:case>
      <m:apply>
        <go:len/>
        <m:apply>
          <m:apply>
            <go:dot/>
            <m:ci>
            flag</m:ci>
            <m:ci>
            Args</m:ci>
          </m:apply>
        </m:apply>
      </m:apply>
      (()  (= (<m:apply>
      <go:ptr/>
      inputname</m:apply>
      ) <m:apply>
      <m:apply>
        <go:dot/>
        <m:ci>
        flag</m:ci>
        <m:ci>
        Arg</m:ci>
      </m:apply>
    </m:apply>
    )) (()  (= (<m:apply>
    <go:ptr/>
    inputname</m:apply>
    ) <m:apply>
    <m:apply>
      <go:dot/>
      <m:ci>
      flag</m:ci>
      <m:ci>
      Arg</m:ci>
    </m:apply>
  </m:apply>
  ) (= (<m:apply>
  <go:ptr/>
  outputname</m:apply>
  ) <m:apply>
  <m:apply>
    <go:dot/>
    <m:ci>
    flag</m:ci>
    <m:ci>
    Arg</m:ci>
  </m:apply>
</m:apply>
))</m:apply>
(when <m:apply>
<go:ptr/>
debug</m:apply>
(:= (<m:ci>
out</m:ci>
<m:ci>
err</m:ci>
) <m:apply>
<m:apply>
  <go:dot/>
  <m:ci>
  os</m:ci>
  <m:ci>
  Create</m:ci>
</m:apply>
<m:cs>
profile</m:cs>
</m:apply>
) (when (!= <m:ci>
err</m:ci>
<go:nil/>
)  <m:apply>
<go:panic/>
<m:ci>
err</m:ci>
</m:apply>
) (= <m:ci>
err</m:ci>
<m:apply>
  <m:apply>
    <go:dot/>
    <m:ci>
    pprof</m:ci>
    <m:ci>
    StartCPUProfile</m:ci>
  </m:apply>
  <m:ci>
  out</m:ci>
</m:apply>
) (when (!= <m:ci>
err</m:ci>
<go:nil/>
)  <m:apply>
<go:panic/>
<m:ci>
err</m:ci>
</m:apply>
) <m:apply>
<m:ci>
compile</m:ci>
</m:apply>
<m:apply>
  <m:apply>
    <go:dot/>
    <m:ci>
    pprof</m:ci>
    <m:ci>
    StopCPUProfile</m:ci>
  </m:apply>
</m:apply>
<m:apply>
  <m:apply>
    <go:dot/>
    <m:ci>
    out</m:ci>
    <m:ci>
    Close</m:ci>
  </m:apply>
</m:apply>
(else  <m:apply>
<m:ci>
compile</m:ci>
</m:apply>
))</go:function>
</go:package>
